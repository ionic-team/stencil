import * as d from '../../../declarations';
import { isOutputTargetDocsJson } from '../../output-targets/output-utils';

export async function generateJsonDocs(config: d.Config, compilerCtx: d.CompilerCtx, docsData: d.JsonDocs, outputTargets: d.OutputTarget[]) {
  const jsonOutputTargets = outputTargets.filter(isOutputTargetDocsJson);
  if (jsonOutputTargets.length === 0) {
    return;
  }
  const docsDtsPath = config.sys.path.join(config.sys.compiler.distDir, 'declarations', 'docs.d.ts');
  const docsDts = await compilerCtx.fs.readFile(docsDtsPath);
  const typesContent = `
/**
 * This is an autogenerated file created by the Stencil compiler.
 * DO NOT MODIFY IT MANUALLY
 */
${docsDts}
declare const _default: JsonDocs;
export default _default;
`;

  const json = {
    ...docsData,
    components: docsData.components.map(cmp => ({
      filePath: cmp.filePath,

      encapsulation: cmp.encapsulation,
      tag: cmp.tag,
      readme: cmp.readme,
      docs: cmp.docs,
      docsTags: cmp.docsTags,
      usage: cmp.usage,
      props: cmp.props,
      methods: cmp.methods,
      events: cmp.events,
      styles: cmp.styles,
      slots: cmp.slots,
      dependents: cmp.dependents,
      dependencies: cmp.dependencies,
      dependencyGraph: cmp.dependencyGraph,
      deprecation: cmp.deprecation,
    }))
  };
  const jsonContent = JSON.stringify(json, null, 2);
  await Promise.all(
    jsonOutputTargets.map(jsonOutput => {
      return writeDocsOutput(compilerCtx,  jsonOutput, jsonContent, typesContent);
    })
  );
}

export async function writeDocsOutput(compilerCtx: d.CompilerCtx, jsonOutput: d.OutputTargetDocsJson, jsonContent: string, typesContent: string) {
  return Promise.all([
    compilerCtx.fs.writeFile(jsonOutput.file, jsonContent),
    (jsonOutput.typesFile
      ? compilerCtx.fs.writeFile(jsonOutput.typesFile, typesContent)
      : Promise.resolve() as any
    )
  ]);
}
