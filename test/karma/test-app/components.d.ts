/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CustomElementChild {
    }
    interface CustomElementChildDifferentNameThanClass {
    }
    interface CustomElementNestedChild {
    }
    interface CustomElementRoot {
    }
    interface CustomElementRootDifferentNameThanClass {
    }
    interface CustomElementsDelegatesFocus {
    }
    interface CustomElementsNoDelegatesFocus {
    }
    interface SlotHtml {
        "inc": number;
    }
    interface SlotNestedDefaultOrderChild {
        "state": boolean;
    }
    interface SlotNestedDefaultOrderParent {
    }
    interface SlotNgIf {
    }
}
declare global {
    interface HTMLCustomElementChildElement extends Components.CustomElementChild, HTMLStencilElement {
    }
    var HTMLCustomElementChildElement: {
        prototype: HTMLCustomElementChildElement;
        new (): HTMLCustomElementChildElement;
    };
    interface HTMLCustomElementChildDifferentNameThanClassElement extends Components.CustomElementChildDifferentNameThanClass, HTMLStencilElement {
    }
    var HTMLCustomElementChildDifferentNameThanClassElement: {
        prototype: HTMLCustomElementChildDifferentNameThanClassElement;
        new (): HTMLCustomElementChildDifferentNameThanClassElement;
    };
    interface HTMLCustomElementNestedChildElement extends Components.CustomElementNestedChild, HTMLStencilElement {
    }
    var HTMLCustomElementNestedChildElement: {
        prototype: HTMLCustomElementNestedChildElement;
        new (): HTMLCustomElementNestedChildElement;
    };
    interface HTMLCustomElementRootElement extends Components.CustomElementRoot, HTMLStencilElement {
    }
    var HTMLCustomElementRootElement: {
        prototype: HTMLCustomElementRootElement;
        new (): HTMLCustomElementRootElement;
    };
    interface HTMLCustomElementRootDifferentNameThanClassElement extends Components.CustomElementRootDifferentNameThanClass, HTMLStencilElement {
    }
    var HTMLCustomElementRootDifferentNameThanClassElement: {
        prototype: HTMLCustomElementRootDifferentNameThanClassElement;
        new (): HTMLCustomElementRootDifferentNameThanClassElement;
    };
    interface HTMLCustomElementsDelegatesFocusElement extends Components.CustomElementsDelegatesFocus, HTMLStencilElement {
    }
    var HTMLCustomElementsDelegatesFocusElement: {
        prototype: HTMLCustomElementsDelegatesFocusElement;
        new (): HTMLCustomElementsDelegatesFocusElement;
    };
    interface HTMLCustomElementsNoDelegatesFocusElement extends Components.CustomElementsNoDelegatesFocus, HTMLStencilElement {
    }
    var HTMLCustomElementsNoDelegatesFocusElement: {
        prototype: HTMLCustomElementsNoDelegatesFocusElement;
        new (): HTMLCustomElementsNoDelegatesFocusElement;
    };
    interface HTMLSlotHtmlElement extends Components.SlotHtml, HTMLStencilElement {
    }
    var HTMLSlotHtmlElement: {
        prototype: HTMLSlotHtmlElement;
        new (): HTMLSlotHtmlElement;
    };
    interface HTMLSlotNestedDefaultOrderChildElement extends Components.SlotNestedDefaultOrderChild, HTMLStencilElement {
    }
    var HTMLSlotNestedDefaultOrderChildElement: {
        prototype: HTMLSlotNestedDefaultOrderChildElement;
        new (): HTMLSlotNestedDefaultOrderChildElement;
    };
    interface HTMLSlotNestedDefaultOrderParentElement extends Components.SlotNestedDefaultOrderParent, HTMLStencilElement {
    }
    var HTMLSlotNestedDefaultOrderParentElement: {
        prototype: HTMLSlotNestedDefaultOrderParentElement;
        new (): HTMLSlotNestedDefaultOrderParentElement;
    };
    interface HTMLSlotNgIfElement extends Components.SlotNgIf, HTMLStencilElement {
    }
    var HTMLSlotNgIfElement: {
        prototype: HTMLSlotNgIfElement;
        new (): HTMLSlotNgIfElement;
    };
    interface HTMLElementTagNameMap {
        "custom-element-child": HTMLCustomElementChildElement;
        "custom-element-child-different-name-than-class": HTMLCustomElementChildDifferentNameThanClassElement;
        "custom-element-nested-child": HTMLCustomElementNestedChildElement;
        "custom-element-root": HTMLCustomElementRootElement;
        "custom-element-root-different-name-than-class": HTMLCustomElementRootDifferentNameThanClassElement;
        "custom-elements-delegates-focus": HTMLCustomElementsDelegatesFocusElement;
        "custom-elements-no-delegates-focus": HTMLCustomElementsNoDelegatesFocusElement;
        "slot-html": HTMLSlotHtmlElement;
        "slot-nested-default-order-child": HTMLSlotNestedDefaultOrderChildElement;
        "slot-nested-default-order-parent": HTMLSlotNestedDefaultOrderParentElement;
        "slot-ng-if": HTMLSlotNgIfElement;
    }
}
declare namespace LocalJSX {
    interface CustomElementChild {
    }
    interface CustomElementChildDifferentNameThanClass {
    }
    interface CustomElementNestedChild {
    }
    interface CustomElementRoot {
    }
    interface CustomElementRootDifferentNameThanClass {
    }
    interface CustomElementsDelegatesFocus {
    }
    interface CustomElementsNoDelegatesFocus {
    }
    interface SlotHtml {
        "inc"?: number;
    }
    interface SlotNestedDefaultOrderChild {
        "state"?: boolean;
    }
    interface SlotNestedDefaultOrderParent {
    }
    interface SlotNgIf {
    }
    interface IntrinsicElements {
        "custom-element-child": CustomElementChild;
        "custom-element-child-different-name-than-class": CustomElementChildDifferentNameThanClass;
        "custom-element-nested-child": CustomElementNestedChild;
        "custom-element-root": CustomElementRoot;
        "custom-element-root-different-name-than-class": CustomElementRootDifferentNameThanClass;
        "custom-elements-delegates-focus": CustomElementsDelegatesFocus;
        "custom-elements-no-delegates-focus": CustomElementsNoDelegatesFocus;
        "slot-html": SlotHtml;
        "slot-nested-default-order-child": SlotNestedDefaultOrderChild;
        "slot-nested-default-order-parent": SlotNestedDefaultOrderParent;
        "slot-ng-if": SlotNgIf;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-element-child": LocalJSX.CustomElementChild & JSXBase.HTMLAttributes<HTMLCustomElementChildElement>;
            "custom-element-child-different-name-than-class": LocalJSX.CustomElementChildDifferentNameThanClass & JSXBase.HTMLAttributes<HTMLCustomElementChildDifferentNameThanClassElement>;
            "custom-element-nested-child": LocalJSX.CustomElementNestedChild & JSXBase.HTMLAttributes<HTMLCustomElementNestedChildElement>;
            "custom-element-root": LocalJSX.CustomElementRoot & JSXBase.HTMLAttributes<HTMLCustomElementRootElement>;
            "custom-element-root-different-name-than-class": LocalJSX.CustomElementRootDifferentNameThanClass & JSXBase.HTMLAttributes<HTMLCustomElementRootDifferentNameThanClassElement>;
            "custom-elements-delegates-focus": LocalJSX.CustomElementsDelegatesFocus & JSXBase.HTMLAttributes<HTMLCustomElementsDelegatesFocusElement>;
            "custom-elements-no-delegates-focus": LocalJSX.CustomElementsNoDelegatesFocus & JSXBase.HTMLAttributes<HTMLCustomElementsNoDelegatesFocusElement>;
            "slot-html": LocalJSX.SlotHtml & JSXBase.HTMLAttributes<HTMLSlotHtmlElement>;
            "slot-nested-default-order-child": LocalJSX.SlotNestedDefaultOrderChild & JSXBase.HTMLAttributes<HTMLSlotNestedDefaultOrderChildElement>;
            "slot-nested-default-order-parent": LocalJSX.SlotNestedDefaultOrderParent & JSXBase.HTMLAttributes<HTMLSlotNestedDefaultOrderParentElement>;
            "slot-ng-if": LocalJSX.SlotNgIf & JSXBase.HTMLAttributes<HTMLSlotNgIfElement>;
        }
    }
}
