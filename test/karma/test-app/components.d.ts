/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CustomElementChild {
    }
    interface CustomElementChildDifferentNameThanClass {
    }
    interface CustomElementNestedChild {
    }
    interface CustomElementRoot {
    }
    interface CustomElementRootDifferentNameThanClass {
    }
    interface CustomElementsDelegatesFocus {
    }
    interface CustomElementsNoDelegatesFocus {
    }
    interface InitCssRoot {
    }
    interface ReparentStyleNoVars {
    }
    interface ReparentStyleWithVars {
    }
    interface ShadowDomSlotNested {
        "i"?: number;
    }
    interface ShadowDomSlotNestedRoot {
    }
    interface SlotChildrenRoot {
    }
    interface SlotConditionalRendering {
    }
    interface SlotDynamicShadowList {
        "items": Array<string>;
    }
    interface SlotHtml {
        "inc": number;
    }
    interface SlotLightDomContent {
    }
    interface SlotLightDomRoot {
    }
    interface SlotLightList {
    }
    interface SlotListLightRoot {
        "items": string[];
    }
    interface SlotNestedDefaultOrderChild {
        "state": boolean;
    }
    interface SlotNestedDefaultOrderParent {
    }
    interface SlotNgIf {
    }
    interface SlotNoDefault {
    }
    interface SlotRef {
    }
    interface SlotReorder {
        "reordered": boolean;
    }
    interface SlotReorderRoot {
    }
    interface SlotReplaceWrapper {
        "href"?: string;
    }
    interface SlotReplaceWrapperRoot {
    }
    interface SlottedCss {
    }
    interface StencilSibling {
    }
    interface TextContentPatchScoped {
    }
    interface TextContentPatchScopedWithSlot {
    }
}
declare global {
    interface HTMLCustomElementChildElement extends Components.CustomElementChild, HTMLStencilElement {
    }
    var HTMLCustomElementChildElement: {
        prototype: HTMLCustomElementChildElement;
        new (): HTMLCustomElementChildElement;
    };
    interface HTMLCustomElementChildDifferentNameThanClassElement extends Components.CustomElementChildDifferentNameThanClass, HTMLStencilElement {
    }
    var HTMLCustomElementChildDifferentNameThanClassElement: {
        prototype: HTMLCustomElementChildDifferentNameThanClassElement;
        new (): HTMLCustomElementChildDifferentNameThanClassElement;
    };
    interface HTMLCustomElementNestedChildElement extends Components.CustomElementNestedChild, HTMLStencilElement {
    }
    var HTMLCustomElementNestedChildElement: {
        prototype: HTMLCustomElementNestedChildElement;
        new (): HTMLCustomElementNestedChildElement;
    };
    interface HTMLCustomElementRootElement extends Components.CustomElementRoot, HTMLStencilElement {
    }
    var HTMLCustomElementRootElement: {
        prototype: HTMLCustomElementRootElement;
        new (): HTMLCustomElementRootElement;
    };
    interface HTMLCustomElementRootDifferentNameThanClassElement extends Components.CustomElementRootDifferentNameThanClass, HTMLStencilElement {
    }
    var HTMLCustomElementRootDifferentNameThanClassElement: {
        prototype: HTMLCustomElementRootDifferentNameThanClassElement;
        new (): HTMLCustomElementRootDifferentNameThanClassElement;
    };
    interface HTMLCustomElementsDelegatesFocusElement extends Components.CustomElementsDelegatesFocus, HTMLStencilElement {
    }
    var HTMLCustomElementsDelegatesFocusElement: {
        prototype: HTMLCustomElementsDelegatesFocusElement;
        new (): HTMLCustomElementsDelegatesFocusElement;
    };
    interface HTMLCustomElementsNoDelegatesFocusElement extends Components.CustomElementsNoDelegatesFocus, HTMLStencilElement {
    }
    var HTMLCustomElementsNoDelegatesFocusElement: {
        prototype: HTMLCustomElementsNoDelegatesFocusElement;
        new (): HTMLCustomElementsNoDelegatesFocusElement;
    };
    interface HTMLInitCssRootElement extends Components.InitCssRoot, HTMLStencilElement {
    }
    var HTMLInitCssRootElement: {
        prototype: HTMLInitCssRootElement;
        new (): HTMLInitCssRootElement;
    };
    interface HTMLReparentStyleNoVarsElement extends Components.ReparentStyleNoVars, HTMLStencilElement {
    }
    var HTMLReparentStyleNoVarsElement: {
        prototype: HTMLReparentStyleNoVarsElement;
        new (): HTMLReparentStyleNoVarsElement;
    };
    interface HTMLReparentStyleWithVarsElement extends Components.ReparentStyleWithVars, HTMLStencilElement {
    }
    var HTMLReparentStyleWithVarsElement: {
        prototype: HTMLReparentStyleWithVarsElement;
        new (): HTMLReparentStyleWithVarsElement;
    };
    interface HTMLShadowDomSlotNestedElement extends Components.ShadowDomSlotNested, HTMLStencilElement {
    }
    var HTMLShadowDomSlotNestedElement: {
        prototype: HTMLShadowDomSlotNestedElement;
        new (): HTMLShadowDomSlotNestedElement;
    };
    interface HTMLShadowDomSlotNestedRootElement extends Components.ShadowDomSlotNestedRoot, HTMLStencilElement {
    }
    var HTMLShadowDomSlotNestedRootElement: {
        prototype: HTMLShadowDomSlotNestedRootElement;
        new (): HTMLShadowDomSlotNestedRootElement;
    };
    interface HTMLSlotChildrenRootElement extends Components.SlotChildrenRoot, HTMLStencilElement {
    }
    var HTMLSlotChildrenRootElement: {
        prototype: HTMLSlotChildrenRootElement;
        new (): HTMLSlotChildrenRootElement;
    };
    interface HTMLSlotConditionalRenderingElement extends Components.SlotConditionalRendering, HTMLStencilElement {
    }
    var HTMLSlotConditionalRenderingElement: {
        prototype: HTMLSlotConditionalRenderingElement;
        new (): HTMLSlotConditionalRenderingElement;
    };
    interface HTMLSlotDynamicShadowListElement extends Components.SlotDynamicShadowList, HTMLStencilElement {
    }
    var HTMLSlotDynamicShadowListElement: {
        prototype: HTMLSlotDynamicShadowListElement;
        new (): HTMLSlotDynamicShadowListElement;
    };
    interface HTMLSlotHtmlElement extends Components.SlotHtml, HTMLStencilElement {
    }
    var HTMLSlotHtmlElement: {
        prototype: HTMLSlotHtmlElement;
        new (): HTMLSlotHtmlElement;
    };
    interface HTMLSlotLightDomContentElement extends Components.SlotLightDomContent, HTMLStencilElement {
    }
    var HTMLSlotLightDomContentElement: {
        prototype: HTMLSlotLightDomContentElement;
        new (): HTMLSlotLightDomContentElement;
    };
    interface HTMLSlotLightDomRootElement extends Components.SlotLightDomRoot, HTMLStencilElement {
    }
    var HTMLSlotLightDomRootElement: {
        prototype: HTMLSlotLightDomRootElement;
        new (): HTMLSlotLightDomRootElement;
    };
    interface HTMLSlotLightListElement extends Components.SlotLightList, HTMLStencilElement {
    }
    var HTMLSlotLightListElement: {
        prototype: HTMLSlotLightListElement;
        new (): HTMLSlotLightListElement;
    };
    interface HTMLSlotListLightRootElement extends Components.SlotListLightRoot, HTMLStencilElement {
    }
    var HTMLSlotListLightRootElement: {
        prototype: HTMLSlotListLightRootElement;
        new (): HTMLSlotListLightRootElement;
    };
    interface HTMLSlotNestedDefaultOrderChildElement extends Components.SlotNestedDefaultOrderChild, HTMLStencilElement {
    }
    var HTMLSlotNestedDefaultOrderChildElement: {
        prototype: HTMLSlotNestedDefaultOrderChildElement;
        new (): HTMLSlotNestedDefaultOrderChildElement;
    };
    interface HTMLSlotNestedDefaultOrderParentElement extends Components.SlotNestedDefaultOrderParent, HTMLStencilElement {
    }
    var HTMLSlotNestedDefaultOrderParentElement: {
        prototype: HTMLSlotNestedDefaultOrderParentElement;
        new (): HTMLSlotNestedDefaultOrderParentElement;
    };
    interface HTMLSlotNgIfElement extends Components.SlotNgIf, HTMLStencilElement {
    }
    var HTMLSlotNgIfElement: {
        prototype: HTMLSlotNgIfElement;
        new (): HTMLSlotNgIfElement;
    };
    interface HTMLSlotNoDefaultElement extends Components.SlotNoDefault, HTMLStencilElement {
    }
    var HTMLSlotNoDefaultElement: {
        prototype: HTMLSlotNoDefaultElement;
        new (): HTMLSlotNoDefaultElement;
    };
    interface HTMLSlotRefElement extends Components.SlotRef, HTMLStencilElement {
    }
    var HTMLSlotRefElement: {
        prototype: HTMLSlotRefElement;
        new (): HTMLSlotRefElement;
    };
    interface HTMLSlotReorderElement extends Components.SlotReorder, HTMLStencilElement {
    }
    var HTMLSlotReorderElement: {
        prototype: HTMLSlotReorderElement;
        new (): HTMLSlotReorderElement;
    };
    interface HTMLSlotReorderRootElement extends Components.SlotReorderRoot, HTMLStencilElement {
    }
    var HTMLSlotReorderRootElement: {
        prototype: HTMLSlotReorderRootElement;
        new (): HTMLSlotReorderRootElement;
    };
    interface HTMLSlotReplaceWrapperElement extends Components.SlotReplaceWrapper, HTMLStencilElement {
    }
    var HTMLSlotReplaceWrapperElement: {
        prototype: HTMLSlotReplaceWrapperElement;
        new (): HTMLSlotReplaceWrapperElement;
    };
    interface HTMLSlotReplaceWrapperRootElement extends Components.SlotReplaceWrapperRoot, HTMLStencilElement {
    }
    var HTMLSlotReplaceWrapperRootElement: {
        prototype: HTMLSlotReplaceWrapperRootElement;
        new (): HTMLSlotReplaceWrapperRootElement;
    };
    interface HTMLSlottedCssElement extends Components.SlottedCss, HTMLStencilElement {
    }
    var HTMLSlottedCssElement: {
        prototype: HTMLSlottedCssElement;
        new (): HTMLSlottedCssElement;
    };
    interface HTMLStencilSiblingElement extends Components.StencilSibling, HTMLStencilElement {
    }
    var HTMLStencilSiblingElement: {
        prototype: HTMLStencilSiblingElement;
        new (): HTMLStencilSiblingElement;
    };
    interface HTMLTextContentPatchScopedElement extends Components.TextContentPatchScoped, HTMLStencilElement {
    }
    var HTMLTextContentPatchScopedElement: {
        prototype: HTMLTextContentPatchScopedElement;
        new (): HTMLTextContentPatchScopedElement;
    };
    interface HTMLTextContentPatchScopedWithSlotElement extends Components.TextContentPatchScopedWithSlot, HTMLStencilElement {
    }
    var HTMLTextContentPatchScopedWithSlotElement: {
        prototype: HTMLTextContentPatchScopedWithSlotElement;
        new (): HTMLTextContentPatchScopedWithSlotElement;
    };
    interface HTMLElementTagNameMap {
        "custom-element-child": HTMLCustomElementChildElement;
        "custom-element-child-different-name-than-class": HTMLCustomElementChildDifferentNameThanClassElement;
        "custom-element-nested-child": HTMLCustomElementNestedChildElement;
        "custom-element-root": HTMLCustomElementRootElement;
        "custom-element-root-different-name-than-class": HTMLCustomElementRootDifferentNameThanClassElement;
        "custom-elements-delegates-focus": HTMLCustomElementsDelegatesFocusElement;
        "custom-elements-no-delegates-focus": HTMLCustomElementsNoDelegatesFocusElement;
        "init-css-root": HTMLInitCssRootElement;
        "reparent-style-no-vars": HTMLReparentStyleNoVarsElement;
        "reparent-style-with-vars": HTMLReparentStyleWithVarsElement;
        "shadow-dom-slot-nested": HTMLShadowDomSlotNestedElement;
        "shadow-dom-slot-nested-root": HTMLShadowDomSlotNestedRootElement;
        "slot-children-root": HTMLSlotChildrenRootElement;
        "slot-conditional-rendering": HTMLSlotConditionalRenderingElement;
        "slot-dynamic-shadow-list": HTMLSlotDynamicShadowListElement;
        "slot-html": HTMLSlotHtmlElement;
        "slot-light-dom-content": HTMLSlotLightDomContentElement;
        "slot-light-dom-root": HTMLSlotLightDomRootElement;
        "slot-light-list": HTMLSlotLightListElement;
        "slot-list-light-root": HTMLSlotListLightRootElement;
        "slot-nested-default-order-child": HTMLSlotNestedDefaultOrderChildElement;
        "slot-nested-default-order-parent": HTMLSlotNestedDefaultOrderParentElement;
        "slot-ng-if": HTMLSlotNgIfElement;
        "slot-no-default": HTMLSlotNoDefaultElement;
        "slot-ref": HTMLSlotRefElement;
        "slot-reorder": HTMLSlotReorderElement;
        "slot-reorder-root": HTMLSlotReorderRootElement;
        "slot-replace-wrapper": HTMLSlotReplaceWrapperElement;
        "slot-replace-wrapper-root": HTMLSlotReplaceWrapperRootElement;
        "slotted-css": HTMLSlottedCssElement;
        "stencil-sibling": HTMLStencilSiblingElement;
        "text-content-patch-scoped": HTMLTextContentPatchScopedElement;
        "text-content-patch-scoped-with-slot": HTMLTextContentPatchScopedWithSlotElement;
    }
}
declare namespace LocalJSX {
    interface CustomElementChild {
    }
    interface CustomElementChildDifferentNameThanClass {
    }
    interface CustomElementNestedChild {
    }
    interface CustomElementRoot {
    }
    interface CustomElementRootDifferentNameThanClass {
    }
    interface CustomElementsDelegatesFocus {
    }
    interface CustomElementsNoDelegatesFocus {
    }
    interface InitCssRoot {
    }
    interface ReparentStyleNoVars {
    }
    interface ReparentStyleWithVars {
    }
    interface ShadowDomSlotNested {
        "i"?: number;
    }
    interface ShadowDomSlotNestedRoot {
    }
    interface SlotChildrenRoot {
    }
    interface SlotConditionalRendering {
    }
    interface SlotDynamicShadowList {
        "items"?: Array<string>;
    }
    interface SlotHtml {
        "inc"?: number;
    }
    interface SlotLightDomContent {
    }
    interface SlotLightDomRoot {
    }
    interface SlotLightList {
    }
    interface SlotListLightRoot {
        "items"?: string[];
    }
    interface SlotNestedDefaultOrderChild {
        "state"?: boolean;
    }
    interface SlotNestedDefaultOrderParent {
    }
    interface SlotNgIf {
    }
    interface SlotNoDefault {
    }
    interface SlotRef {
    }
    interface SlotReorder {
        "reordered"?: boolean;
    }
    interface SlotReorderRoot {
    }
    interface SlotReplaceWrapper {
        "href"?: string;
    }
    interface SlotReplaceWrapperRoot {
    }
    interface SlottedCss {
    }
    interface StencilSibling {
    }
    interface TextContentPatchScoped {
    }
    interface TextContentPatchScopedWithSlot {
    }
    interface IntrinsicElements {
        "custom-element-child": CustomElementChild;
        "custom-element-child-different-name-than-class": CustomElementChildDifferentNameThanClass;
        "custom-element-nested-child": CustomElementNestedChild;
        "custom-element-root": CustomElementRoot;
        "custom-element-root-different-name-than-class": CustomElementRootDifferentNameThanClass;
        "custom-elements-delegates-focus": CustomElementsDelegatesFocus;
        "custom-elements-no-delegates-focus": CustomElementsNoDelegatesFocus;
        "init-css-root": InitCssRoot;
        "reparent-style-no-vars": ReparentStyleNoVars;
        "reparent-style-with-vars": ReparentStyleWithVars;
        "shadow-dom-slot-nested": ShadowDomSlotNested;
        "shadow-dom-slot-nested-root": ShadowDomSlotNestedRoot;
        "slot-children-root": SlotChildrenRoot;
        "slot-conditional-rendering": SlotConditionalRendering;
        "slot-dynamic-shadow-list": SlotDynamicShadowList;
        "slot-html": SlotHtml;
        "slot-light-dom-content": SlotLightDomContent;
        "slot-light-dom-root": SlotLightDomRoot;
        "slot-light-list": SlotLightList;
        "slot-list-light-root": SlotListLightRoot;
        "slot-nested-default-order-child": SlotNestedDefaultOrderChild;
        "slot-nested-default-order-parent": SlotNestedDefaultOrderParent;
        "slot-ng-if": SlotNgIf;
        "slot-no-default": SlotNoDefault;
        "slot-ref": SlotRef;
        "slot-reorder": SlotReorder;
        "slot-reorder-root": SlotReorderRoot;
        "slot-replace-wrapper": SlotReplaceWrapper;
        "slot-replace-wrapper-root": SlotReplaceWrapperRoot;
        "slotted-css": SlottedCss;
        "stencil-sibling": StencilSibling;
        "text-content-patch-scoped": TextContentPatchScoped;
        "text-content-patch-scoped-with-slot": TextContentPatchScopedWithSlot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-element-child": LocalJSX.CustomElementChild & JSXBase.HTMLAttributes<HTMLCustomElementChildElement>;
            "custom-element-child-different-name-than-class": LocalJSX.CustomElementChildDifferentNameThanClass & JSXBase.HTMLAttributes<HTMLCustomElementChildDifferentNameThanClassElement>;
            "custom-element-nested-child": LocalJSX.CustomElementNestedChild & JSXBase.HTMLAttributes<HTMLCustomElementNestedChildElement>;
            "custom-element-root": LocalJSX.CustomElementRoot & JSXBase.HTMLAttributes<HTMLCustomElementRootElement>;
            "custom-element-root-different-name-than-class": LocalJSX.CustomElementRootDifferentNameThanClass & JSXBase.HTMLAttributes<HTMLCustomElementRootDifferentNameThanClassElement>;
            "custom-elements-delegates-focus": LocalJSX.CustomElementsDelegatesFocus & JSXBase.HTMLAttributes<HTMLCustomElementsDelegatesFocusElement>;
            "custom-elements-no-delegates-focus": LocalJSX.CustomElementsNoDelegatesFocus & JSXBase.HTMLAttributes<HTMLCustomElementsNoDelegatesFocusElement>;
            "init-css-root": LocalJSX.InitCssRoot & JSXBase.HTMLAttributes<HTMLInitCssRootElement>;
            "reparent-style-no-vars": LocalJSX.ReparentStyleNoVars & JSXBase.HTMLAttributes<HTMLReparentStyleNoVarsElement>;
            "reparent-style-with-vars": LocalJSX.ReparentStyleWithVars & JSXBase.HTMLAttributes<HTMLReparentStyleWithVarsElement>;
            "shadow-dom-slot-nested": LocalJSX.ShadowDomSlotNested & JSXBase.HTMLAttributes<HTMLShadowDomSlotNestedElement>;
            "shadow-dom-slot-nested-root": LocalJSX.ShadowDomSlotNestedRoot & JSXBase.HTMLAttributes<HTMLShadowDomSlotNestedRootElement>;
            "slot-children-root": LocalJSX.SlotChildrenRoot & JSXBase.HTMLAttributes<HTMLSlotChildrenRootElement>;
            "slot-conditional-rendering": LocalJSX.SlotConditionalRendering & JSXBase.HTMLAttributes<HTMLSlotConditionalRenderingElement>;
            "slot-dynamic-shadow-list": LocalJSX.SlotDynamicShadowList & JSXBase.HTMLAttributes<HTMLSlotDynamicShadowListElement>;
            "slot-html": LocalJSX.SlotHtml & JSXBase.HTMLAttributes<HTMLSlotHtmlElement>;
            "slot-light-dom-content": LocalJSX.SlotLightDomContent & JSXBase.HTMLAttributes<HTMLSlotLightDomContentElement>;
            "slot-light-dom-root": LocalJSX.SlotLightDomRoot & JSXBase.HTMLAttributes<HTMLSlotLightDomRootElement>;
            "slot-light-list": LocalJSX.SlotLightList & JSXBase.HTMLAttributes<HTMLSlotLightListElement>;
            "slot-list-light-root": LocalJSX.SlotListLightRoot & JSXBase.HTMLAttributes<HTMLSlotListLightRootElement>;
            "slot-nested-default-order-child": LocalJSX.SlotNestedDefaultOrderChild & JSXBase.HTMLAttributes<HTMLSlotNestedDefaultOrderChildElement>;
            "slot-nested-default-order-parent": LocalJSX.SlotNestedDefaultOrderParent & JSXBase.HTMLAttributes<HTMLSlotNestedDefaultOrderParentElement>;
            "slot-ng-if": LocalJSX.SlotNgIf & JSXBase.HTMLAttributes<HTMLSlotNgIfElement>;
            "slot-no-default": LocalJSX.SlotNoDefault & JSXBase.HTMLAttributes<HTMLSlotNoDefaultElement>;
            "slot-ref": LocalJSX.SlotRef & JSXBase.HTMLAttributes<HTMLSlotRefElement>;
            "slot-reorder": LocalJSX.SlotReorder & JSXBase.HTMLAttributes<HTMLSlotReorderElement>;
            "slot-reorder-root": LocalJSX.SlotReorderRoot & JSXBase.HTMLAttributes<HTMLSlotReorderRootElement>;
            "slot-replace-wrapper": LocalJSX.SlotReplaceWrapper & JSXBase.HTMLAttributes<HTMLSlotReplaceWrapperElement>;
            "slot-replace-wrapper-root": LocalJSX.SlotReplaceWrapperRoot & JSXBase.HTMLAttributes<HTMLSlotReplaceWrapperRootElement>;
            "slotted-css": LocalJSX.SlottedCss & JSXBase.HTMLAttributes<HTMLSlottedCssElement>;
            "stencil-sibling": LocalJSX.StencilSibling & JSXBase.HTMLAttributes<HTMLStencilSiblingElement>;
            "text-content-patch-scoped": LocalJSX.TextContentPatchScoped & JSXBase.HTMLAttributes<HTMLTextContentPatchScopedElement>;
            "text-content-patch-scoped-with-slot": LocalJSX.TextContentPatchScopedWithSlot & JSXBase.HTMLAttributes<HTMLTextContentPatchScopedWithSlotElement>;
        }
    }
}
