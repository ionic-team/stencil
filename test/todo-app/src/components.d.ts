/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppRoot {
    }
    interface TodoInput {
    }
    interface TodoItem {
        "checked": boolean;
        "text": string;
    }
}
export interface TodoInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTodoInputElement;
}
export interface TodoItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTodoItemElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLTodoInputElementEventMap {
        "inputSubmit": any;
    }
    interface HTMLTodoInputElement extends Components.TodoInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTodoInputElementEventMap>(type: K, listener: (this: HTMLTodoInputElement, ev: TodoInputCustomEvent<HTMLTodoInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTodoInputElementEventMap>(type: K, listener: (this: HTMLTodoInputElement, ev: TodoInputCustomEvent<HTMLTodoInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTodoInputElement: {
        prototype: HTMLTodoInputElement;
        new (): HTMLTodoInputElement;
    };
    interface HTMLTodoItemElementEventMap {
        "itemCheck": any;
        "itemRemove": any;
    }
    interface HTMLTodoItemElement extends Components.TodoItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTodoItemElementEventMap>(type: K, listener: (this: HTMLTodoItemElement, ev: TodoItemCustomEvent<HTMLTodoItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTodoItemElementEventMap>(type: K, listener: (this: HTMLTodoItemElement, ev: TodoItemCustomEvent<HTMLTodoItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTodoItemElement: {
        prototype: HTMLTodoItemElement;
        new (): HTMLTodoItemElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "todo-input": HTMLTodoInputElement;
        "todo-item": HTMLTodoItemElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface TodoInput {
        "onInputSubmit"?: (event: TodoInputCustomEvent<any>) => void;
    }
    interface TodoItem {
        "checked"?: boolean;
        "onItemCheck"?: (event: TodoItemCustomEvent<any>) => void;
        "onItemRemove"?: (event: TodoItemCustomEvent<any>) => void;
        "text"?: string;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "todo-input": TodoInput;
        "todo-item": TodoItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "todo-input": LocalJSX.TodoInput & JSXBase.HTMLAttributes<HTMLTodoInputElement>;
            "todo-item": LocalJSX.TodoItem & JSXBase.HTMLAttributes<HTMLTodoItemElement>;
        }
    }
}
