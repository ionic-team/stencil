import { MockAttr, MockAttributeMap } from './attribute';
import { MockClassList } from './class-list';
import { MockCSSStyleDeclaration } from './css-style-declaration';
import { MockEvent } from './event';
import { SerializeNodeToHtmlOptions } from './serialize-node';
export declare class MockNode {
    private _nodeValue;
    nodeName: string | null;
    nodeType: number;
    ownerDocument: any;
    parentNode: MockNode | null;
    childNodes: MockNode[];
    constructor(ownerDocument: any, nodeType: number, nodeName: string | null, nodeValue: string | null);
    appendChild(newNode: MockNode): MockNode;
    append(...items: (MockNode | string)[]): void;
    prepend(...items: (MockNode | string)[]): void;
    cloneNode(deep?: boolean): MockNode;
    compareDocumentPosition(_other: MockNode): number;
    get firstChild(): MockNode | null;
    insertBefore(newNode: MockNode, referenceNode: MockNode): MockNode;
    get isConnected(): boolean;
    isSameNode(node: any): boolean;
    get lastChild(): MockNode | null;
    get nextSibling(): MockNode | null;
    get nodeValue(): string;
    set nodeValue(value: string);
    get parentElement(): any;
    set parentElement(value: any);
    get previousSibling(): MockNode | null;
    contains(otherNode: MockNode): boolean;
    removeChild(childNode: MockNode): MockNode;
    remove(): void;
    replaceChild(newChild: MockNode, oldChild: MockNode): MockNode;
    get textContent(): string;
    set textContent(value: string);
    static ELEMENT_NODE: number;
    static TEXT_NODE: number;
    static PROCESSING_INSTRUCTION_NODE: number;
    static COMMENT_NODE: number;
    static DOCUMENT_NODE: number;
    static DOCUMENT_TYPE_NODE: number;
    static DOCUMENT_FRAGMENT_NODE: number;
}
export declare class MockNodeList {
    childNodes: MockNode[];
    length: number;
    ownerDocument: any;
    constructor(ownerDocument: any, childNodes: MockNode[], length: number);
}
type MockElementInternals = Record<keyof ElementInternals, null>;
export declare class MockElement extends MockNode {
    __namespaceURI: string | null;
    __attributeMap: MockAttributeMap | null | undefined;
    __shadowRoot: ShadowRoot | null | undefined;
    __style: MockCSSStyleDeclaration | null | undefined;
    attachInternals(): MockElementInternals;
    constructor(ownerDocument: any, nodeName: string | null, namespaceURI?: string | null);
    addEventListener(type: string, handler: (ev?: any) => void): void;
    attachShadow(_opts: ShadowRootInit): any;
    blur(): void;
    get namespaceURI(): string;
    get shadowRoot(): any;
    set shadowRoot(shadowRoot: any);
    get attributes(): MockAttributeMap;
    set attributes(attrs: MockAttributeMap);
    get children(): MockElement[];
    get childElementCount(): number;
    get className(): string;
    set className(value: string);
    get classList(): MockClassList;
    click(): void;
    cloneNode(_deep?: boolean): MockElement;
    closest(selector: string): this;
    get dataset(): any;
    get dir(): string;
    set dir(value: string);
    dispatchEvent(ev: MockEvent): boolean;
    get firstElementChild(): MockElement | null;
    focus(_options?: {
        preventScroll?: boolean;
    }): void;
    getAttribute(attrName: string): any;
    getAttributeNS(namespaceURI: string | null, attrName: string): string;
    getAttributeNode(attrName: string): MockAttr | null;
    getBoundingClientRect(): {
        bottom: number;
        height: number;
        left: number;
        right: number;
        top: number;
        width: number;
        x: number;
        y: number;
    };
    getRootNode(opts?: {
        composed?: boolean;
        [key: string]: any;
    }): Node;
    get draggable(): boolean;
    set draggable(value: boolean);
    hasChildNodes(): boolean;
    get id(): string;
    set id(value: string);
    get innerHTML(): string;
    set innerHTML(html: string);
    get innerText(): string;
    set innerText(value: string);
    insertAdjacentElement(position: 'beforebegin' | 'afterbegin' | 'beforeend' | 'afterend', elm: MockHTMLElement): MockHTMLElement;
    insertAdjacentHTML(position: 'beforebegin' | 'afterbegin' | 'beforeend' | 'afterend', html: string): void;
    insertAdjacentText(position: 'beforebegin' | 'afterbegin' | 'beforeend' | 'afterend', text: string): void;
    hasAttribute(attrName: string): boolean;
    hasAttributeNS(namespaceURI: string | null, name: string): boolean;
    get hidden(): boolean;
    set hidden(isHidden: boolean);
    get lang(): string;
    set lang(value: string);
    get lastElementChild(): MockElement | null;
    matches(selector: string): boolean;
    get nextElementSibling(): any;
    get outerHTML(): string;
    get previousElementSibling(): any;
    getElementsByClassName(classNames: string): MockElement[];
    getElementsByTagName(tagName: string): MockElement[];
    querySelector(selector: string): Element;
    querySelectorAll(selector: string): Element[];
    removeAttribute(attrName: string): void;
    removeAttributeNS(namespaceURI: string | null, attrName: string): void;
    removeEventListener(type: string, handler: any): void;
    setAttribute(attrName: string, value: any): void;
    setAttributeNS(namespaceURI: string | null, attrName: string, value: any): void;
    get style(): any;
    set style(val: any);
    get tabIndex(): number;
    set tabIndex(value: number);
    get tagName(): string;
    set tagName(value: string);
    get textContent(): string;
    set textContent(value: string);
    get title(): string;
    set title(value: string);
    animate(): void;
    onanimationstart(): void;
    onanimationend(): void;
    onanimationiteration(): void;
    onabort(): void;
    onauxclick(): void;
    onbeforecopy(): void;
    onbeforecut(): void;
    onbeforepaste(): void;
    onblur(): void;
    oncancel(): void;
    oncanplay(): void;
    oncanplaythrough(): void;
    onchange(): void;
    onclick(): void;
    onclose(): void;
    oncontextmenu(): void;
    oncopy(): void;
    oncuechange(): void;
    oncut(): void;
    ondblclick(): void;
    ondrag(): void;
    ondragend(): void;
    ondragenter(): void;
    ondragleave(): void;
    ondragover(): void;
    ondragstart(): void;
    ondrop(): void;
    ondurationchange(): void;
    onemptied(): void;
    onended(): void;
    onerror(): void;
    onfocus(): void;
    onfocusin(): void;
    onfocusout(): void;
    onformdata(): void;
    onfullscreenchange(): void;
    onfullscreenerror(): void;
    ongotpointercapture(): void;
    oninput(): void;
    oninvalid(): void;
    onkeydown(): void;
    onkeypress(): void;
    onkeyup(): void;
    onload(): void;
    onloadeddata(): void;
    onloadedmetadata(): void;
    onloadstart(): void;
    onlostpointercapture(): void;
    onmousedown(): void;
    onmouseenter(): void;
    onmouseleave(): void;
    onmousemove(): void;
    onmouseout(): void;
    onmouseover(): void;
    onmouseup(): void;
    onmousewheel(): void;
    onpaste(): void;
    onpause(): void;
    onplay(): void;
    onplaying(): void;
    onpointercancel(): void;
    onpointerdown(): void;
    onpointerenter(): void;
    onpointerleave(): void;
    onpointermove(): void;
    onpointerout(): void;
    onpointerover(): void;
    onpointerup(): void;
    onprogress(): void;
    onratechange(): void;
    onreset(): void;
    onresize(): void;
    onscroll(): void;
    onsearch(): void;
    onseeked(): void;
    onseeking(): void;
    onselect(): void;
    onselectstart(): void;
    onstalled(): void;
    onsubmit(): void;
    onsuspend(): void;
    ontimeupdate(): void;
    ontoggle(): void;
    onvolumechange(): void;
    onwaiting(): void;
    onwebkitfullscreenchange(): void;
    onwebkitfullscreenerror(): void;
    onwheel(): void;
    requestFullscreen(): void;
    scrollBy(): void;
    scrollTo(): void;
    scrollIntoView(): void;
    toString(opts?: SerializeNodeToHtmlOptions): string;
}
export declare function resetElement(elm: MockElement): void;
export declare class MockHTMLElement extends MockElement {
    __namespaceURI: string;
    constructor(ownerDocument: any, nodeName: string);
    get tagName(): string;
    set tagName(value: string);
    get attributes(): MockAttributeMap;
    set attributes(attrs: MockAttributeMap);
}
export declare class MockTextNode extends MockNode {
    constructor(ownerDocument: any, text: string);
    cloneNode(_deep?: boolean): MockTextNode;
    get textContent(): string;
    set textContent(text: string);
    get data(): string;
    set data(text: string);
    get wholeText(): string;
}
export {};
