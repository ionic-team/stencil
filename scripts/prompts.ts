import color from 'ansi-colors';
import inquirer from 'inquirer';

import { BuildOptions } from './utils/options';
import { getNewVersion, isValidVersionInput, prettyVersionDiff, SEMVER_INCREMENTS } from './utils/release-utils';

/**
 * A type describing the answers to prompts for preparing a release
 */
export type PrepareReleasePromptAnswers = {
  /**
   * If `true`, run release preparation steps
   */
  confirm: boolean;
  /**
   * A semver compliant version, generated by the prompting question
   */
  version?: string;
  /**
   * A user defined version. This version takes precedence over {@link PrepareReleasePromptAnswers#version}.
   */
  specifiedVersion?: string;
};

/**
 * Prompts a developer to answer questions regarding how a release of Stencil should be performed
 * @param opts build options containing the metadata needed to release a new version of Stencil
 */
export async function promptPrepareRelease(opts: BuildOptions): Promise<PrepareReleasePromptAnswers> {
  const pkg = opts.packageJson;
  const oldVersion = opts.packageJson.version;
  console.log(
    `\nPrepare to publish ${opts.vermoji}  ${color.bold.magenta(pkg.name)} ${color.dim(`(currently ${oldVersion})`)}\n`
  );

  const NON_SERVER_INCREMENTS: ReadonlyArray<{ name: string; value: string }> = [
    {
      name: 'Dry Run',
      value: getNewVersion(oldVersion, 'patch') + '-dryrun',
    },
    {
      name: 'Other (specify)',
      value: null,
    },
  ];

  const prompts: inquirer.QuestionCollection<PrepareReleasePromptAnswers> = [
    {
      type: 'list',
      name: 'version',
      message: 'Select semver increment or specify new version',
      pageSize: SEMVER_INCREMENTS.length + NON_SERVER_INCREMENTS.length,
      choices: SEMVER_INCREMENTS.map((inc) => ({
        name: `${inc}   ${prettyVersionDiff(oldVersion, inc)}`,
        value: inc,
      })).concat([new inquirer.Separator() as any, ...NON_SERVER_INCREMENTS]),
      filter: (input: string) => (isValidVersionInput(input) ? getNewVersion(oldVersion, input) : input),
    },
    {
      type: 'input',
      // this name is intentionally different from 'version' above to make the `when` check below work properly
      // (this prompt should only run if `version` was not already input)
      name: 'specifiedVersion',
      message: 'Specify Version',
      when: (answers: any) => !answers.version,
      filter: (input: string) => (isValidVersionInput(input) ? getNewVersion(pkg.version, input) : input),
      validate: (input: string) => {
        if (!isValidVersionInput(input)) {
          return 'Please specify a valid semver, for example, `1.2.3`, or `3.0.0-alpha.0`. See http://semver.org';
        }
        return true;
      },
    },
    {
      type: 'confirm',
      name: 'confirm',
      message: (answers: any) => {
        const version = answers.version ?? answers.specifiedVersion;
        return `Prepare release ${opts.vermoji}  ${color.yellow(version)} from ${oldVersion}. Continue?`;
      },
    },
  ];

  let answers: PrepareReleasePromptAnswers;
  try {
    answers = await inquirer.prompt<PrepareReleasePromptAnswers>(prompts);
  } catch (err: any) {
    console.log('\n', color.red(err), '\n');
    process.exit(0);
  }
  return answers;
}
