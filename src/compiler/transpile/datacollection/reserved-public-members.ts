import * as d  from '../../../declarations';
import { buildWarn } from '../../util';


export function validatePublicName(diagnostics: d.Diagnostic[], componentClass: string, memberName: string, decorator: string, memberType: string) {
  if (isReservedMember(memberName)) {
    const diagnostic = buildWarn(diagnostics);
    diagnostic.messageText = [
      `The ${decorator} name "${memberName}" used within the "${componentClass}" class is a reserved public name. `,
      `Please rename the "${memberName}" ${memberType} so it does not conflict with an existing standardized prototype member. `,
      `Reusing ${memberType} names that are already defined on the element's prototype may cause `,
      `unexpected runtime errors or user-interface issues on various browsers, so it's best to avoid them entirely.`
    ].join('');
  }
}


const READ_ONLY_PROPERTIES = [
  'attributes',
  'baseURI',
  'childElementCount',
  'childNodes',
  'children',
  'classList',
  'clientHeight',
  'clientLeft',
  'clientTop',
  'clientWidth',
  'contentEditable',
  'dataset',
  'firstChild',
  'firstElementChild',
  'host',
  'isConnected',
  'isContentEditable',
  'lastChild',
  'lastElementChild',
  'localName',
  'namespaceURI',
  'nextElementSibling',
  'nextSibling',
  'nodeName',
  'nodePrincipal',
  'nodeType',
  'nodeValue',
  'offsetHeight',
  'offsetLeft',
  'offsetParent',
  'offsetTop',
  'offsetWidth',
  'ownerDocument',
  'parentElement',
  'parentNode',
  'prefix',
  'previousElementSibling',
  'previousSibling',
  'rootNode',
  'runtimeStyle',
  'scrollHeight',
  'scrollLeft',
  'scrollLeftMax',
  'scrollTop',
  'scrollTopMax',
  'scrollWidth',
  'shadowRoot',
  'slot',
  'tagName',
  'title',
];


const METHODS = [
  'addEventListener',
  'after',
  'animate',
  'append',
  'appendChild',
  'attachEvent',
  'attachShadow',
  'before',
  'blur',
  'click',
  'cloneNode',
  'closest',
  'compareDocumentPosition',
  'contains',
  'detachEvent',
  'dispatchEvent',
  'fireEvent',
  'focus',
  'getAttribute',
  'getAttributeNames',
  'getAttributeNode',
  'getAttributeNodeNS',
  'getAttributeNS',
  'getBoundingClientRect',
  'getClientRects',
  'getElementsByClassName',
  'getElementsByTagName',
  'getElementsByTagNameNS',
  'getRootNode',
  'getUserData',
  'hasAttribute',
  'hasAttributeNS',
  'hasAttributes',
  'hasChildNodes',
  'insertAdjacentElement',
  'insertAdjacentHTML',
  'insertAdjacentText',
  'insertBefore',
  'isDefaultNamespace',
  'isEqualNode',
  'isSameNode',
  'isSupported',
  'lookupNamespaceURI',
  'lookupPrefix',
  'matches',
  'normalize',
  'prepend',
  'querySelector',
  'querySelectorAll',
  'querySelectorAll',
  'releasePointerCapture',
  'removeChild',
  'remove',
  'removeAttribute',
  'removeAttributeNode',
  'removeAttributeNS',
  'removeEventListener',
  'replaceChild',
  'replaceWith',
  'requestFullscreen',
  'requestPointerLock',
  'scrollIntoView',
  'scrollIntoViewIfNeeded',
  'setAttribute',
  'setAttributeNode',
  'setAttributeNodeNS',
  'setAttributeNS',
  'setCapture',
  'setPointerCapture',
];


const EVENT_HANDLERS = [
  'onabort',
  'onanimationend',
  'onanimationendcapture',
  'onanimationiteration',
  'onanimationiterationcapture',
  'onanimationstart',
  'onanimationstartcapture',
  'onauxclick',
  'onbeforecopy',
  'onbeforecut',
  'onbeforepaste',
  'onblur',
  'onblurcapture',
  'oncancel',
  'oncanplaythrough',
  'onchange',
  'onchangecapture',
  'onclick',
  'onclickcapture',
  'onclose',
  'oncompositionend',
  'oncompositionendcapture',
  'oncompositionstart',
  'oncompositionstartcapture',
  'oncompositionupdate',
  'oncompositionupdatecapture',
  'oncontextmenu',
  'oncontextmenucapture',
  'oncopy',
  'oncopycapture',
  'oncuechange',
  'oncut',
  'oncutcapture',
  'ondblclick',
  'ondblclickcapture',
  'ondrag',
  'ondragcapture',
  'ondragend',
  'ondragendcapture',
  'ondragenter',
  'ondragentercapture',
  'ondragexit',
  'ondragexitcapture',
  'ondragleave',
  'ondragleavecapture',
  'ondragover',
  'ondragovercapture',
  'ondragstart',
  'ondragstartcapture',
  'ondrop',
  'ondropcapture',
  'ondurationchange',
  'onemptied',
  'onended',
  'onerror',
  'onerrorcapture',
  'onfocus',
  'onfocuscapture',
  'onfullscreenchange',
  'onfullscreenerror',
  'ongotpointercapture',
  'oninput',
  'oninputcapture',
  'oninvalid',
  'oninvalidcapture',
  'onkeydown',
  'onkeydowncapture',
  'onkeypress',
  'onkeypresscapture',
  'onkeyup',
  'onkeyupcapture',
  'onload',
  'onloadcapture',
  'onloadeddata',
  'onloadedmetadata',
  'onloadstart',
  'onlostpointercapture',
  'onmousedown',
  'onmousedowncapture',
  'onmouseenter',
  'onmouseleave',
  'onmousemove',
  'onmousemovecapture',
  'onmouseout',
  'onmouseoutcapture',
  'onmouseover',
  'onmouseovercapture',
  'onmouseup',
  'onmouseupcapture',
  'onpaste',
  'onpastecapture',
  'onpause',
  'onplay',
  'onplaying',
  'onpointercancel',
  'onpointerdown',
  'onpointerenter',
  'onpointerleave',
  'onpointermove',
  'onpointerout',
  'onpointerover',
  'onpointerup',
  'onprogress',
  'onratechange',
  'onreset',
  'onresetcapture',
  'onresize',
  'onscroll',
  'onscrollcapture',
  'onsearch',
  'onseeked',
  'onseeking',
  'onselectstart',
  'onstalled',
  'onsubmit',
  'onsubmitcapture',
  'onsuspend',
  'ontimeupdate',
  'ontoggle',
  'ontouchcancel',
  'ontouchcancelcapture',
  'ontouchend',
  'ontouchendcapture',
  'ontouchmove',
  'ontouchmovecapture',
  'ontouchstart',
  'ontouchstartcapture',
  'ontransitionend',
  'ontransitionendcapture',
  'onvolumechange',
  'onwaiting',
  'onwebkitfullscreenchange',
  'onwebkitfullscreenerror',
  'onwheel',
  'onwheelcapture',
];


const RESERVED_PUBLIC_MEMBERS = [
  ...READ_ONLY_PROPERTIES,
  ...METHODS,
  ...EVENT_HANDLERS
].map(p => p.toLowerCase());


function isReservedMember(memberName: string) {
  memberName = memberName.toLowerCase();
  return RESERVED_PUBLIC_MEMBERS.includes(memberName);
}
