import { MockAttr } from './attribute';
import { MockComment } from './comment-node';
import { MockDocumentFragment } from './document-fragment';
import { MockDocumentTypeNode } from './document-type-node';
import { MockElement, MockHTMLElement, MockTextNode } from './node';
export declare class MockDocument extends MockHTMLElement {
    defaultView: any;
    cookie: string;
    referrer: string;
    constructor(html?: string | boolean, win?: any);
    get dir(): string;
    set dir(value: string);
    get location(): Location;
    set location(val: Location);
    get baseURI(): string;
    get URL(): string;
    get styleSheets(): Element[];
    get scripts(): Element[];
    get forms(): Element[];
    get images(): Element[];
    get scrollingElement(): MockElement;
    get documentElement(): MockElement;
    set documentElement(documentElement: MockElement);
    get head(): MockElement;
    set head(head: MockElement);
    get body(): MockElement;
    set body(body: MockElement);
    appendChild(newNode: MockElement): MockElement;
    createComment(data: string): MockComment;
    createAttribute(attrName: string): MockAttr;
    createAttributeNS(namespaceURI: string, attrName: string): MockAttr;
    createElement(tagName: string): any;
    createElementNS(namespaceURI: string, tagName: string): any;
    createTextNode(text: string): MockTextNode;
    createDocumentFragment(): MockDocumentFragment;
    createDocumentTypeNode(): MockDocumentTypeNode;
    getElementById(id: string): MockElement;
    getElementsByName(elmName: string): MockElement[];
    get title(): string;
    set title(value: string);
}
export declare function createDocument(html?: string | boolean): Document;
export declare function createFragment(html?: string): DocumentFragment;
export declare function resetDocument(doc: Document): void;
export declare function getElementById(elm: MockElement, id: string): MockElement;
export declare function setOwnerDocument(elm: MockElement, ownerDocument: any): void;
