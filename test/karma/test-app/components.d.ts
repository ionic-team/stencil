/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SomeTypes } from "./util";
import { TestEventDetail } from "./event-custom-type/cmp";
export namespace Components {
    interface AppendChild {
    }
    interface AttributeBasic {
        "customAttr": string;
        "multiWord": string;
        "single": string;
    }
    interface AttributeBasicRoot {
    }
    interface AttributeBoolean {
        "boolState"?: boolean;
        "noreflect"?: boolean;
        "strState"?: string;
    }
    interface AttributeBooleanRoot {
        "toggleState": () => Promise<void>;
    }
    interface AttributeComplex {
        "bool0": boolean;
        "bool1"?: boolean;
        "bool2"?: boolean;
        "getInstance": () => Promise<this>;
        "nu0": number;
        "nu1"?: number;
        "nu2"?: SomeTypes.Number;
        "str0": string;
        "str1"?: string;
        "str2"?: SomeTypes.String;
    }
    interface AttributeHost {
    }
    interface AttributeHtmlRoot {
        "anyAttr"?: any;
        "nuAttr"?: number;
        "strAttr"?: string;
    }
    interface BadSharedJsx {
    }
    interface BuildData {
    }
    interface ChildReflectNanAttribute {
        "val": number;
    }
    interface ChildWithReflection {
        "val": number | any;
    }
    interface CmpLabel {
    }
    interface CmpLabelWithSlotSibling {
    }
    interface ConditionalBasic {
    }
    interface ConditionalRerender {
    }
    interface ConditionalRerenderRoot {
    }
    interface CssCmp {
    }
    interface CssVariablesNoEncapsulation {
    }
    interface CssVariablesShadowDom {
    }
    interface CustomElementChild {
    }
    interface CustomElementChildDifferentNameThanClass {
    }
    interface CustomElementNestedChild {
    }
    interface CustomElementRoot {
    }
    interface CustomElementRootDifferentNameThanClass {
    }
    interface CustomElementsDelegatesFocus {
    }
    interface CustomElementsNoDelegatesFocus {
    }
    interface CustomEventRoot {
    }
    interface DelegatesFocus {
    }
    interface DomReattach {
        "didLoad": number;
        "didUnload": number;
        "willLoad": number;
    }
    interface DomReattachClone {
    }
    interface DomReattachCloneDeepSlot {
    }
    interface DomReattachCloneHost {
    }
    interface DynamicCssVariable {
    }
    interface DynamicImport {
        "update": () => Promise<void>;
    }
    interface Es5AddclassSvg {
    }
    interface EsmImport {
        "propVal": number;
        "someMethod": () => Promise<void>;
    }
    interface EventBasic {
    }
    interface EventCustomType {
    }
    interface ExternalImportA {
    }
    interface ExternalImportB {
    }
    interface ExternalImportC {
    }
    interface FactoryJsx {
    }
    interface ImageImport {
    }
    interface InitCssRoot {
    }
    interface InputBasicRoot {
        "value"?: string;
    }
    interface JsonBasic {
    }
    interface KeyReorder {
        "num"?: number;
    }
    interface KeyReorderRoot {
    }
    interface LessCmp {
    }
    interface LifecycleAsyncA {
    }
    interface LifecycleAsyncB {
        "value": string;
    }
    interface LifecycleAsyncC {
        "value": string;
    }
    interface LifecycleBasicA {
    }
    interface LifecycleBasicB {
        "value": string;
    }
    interface LifecycleBasicC {
        "value": string;
    }
    interface LifecycleNestedA {
    }
    interface LifecycleNestedB {
    }
    interface LifecycleNestedC {
    }
    interface LifecycleUnloadA {
    }
    interface LifecycleUnloadB {
    }
    interface LifecycleUnloadRoot {
    }
    interface LifecycleUpdateA {
    }
    interface LifecycleUpdateB {
        "value": number;
    }
    interface LifecycleUpdateC {
        "value": number;
    }
    interface ListenJsx {
    }
    interface ListenJsxRoot {
    }
    interface ListenReattach {
    }
    interface ListenWindow {
    }
    interface NoDelegatesFocus {
    }
    interface NodeGlobals {
    }
    interface NodeResolution {
    }
    interface ParentReflectNanAttribute {
    }
    interface ParentWithReflectChild {
    }
    interface ReflectNanAttribute {
        "val": number;
    }
    interface ReflectNanAttributeHyphen {
        "valNum": number;
    }
    interface ReflectToAttr {
        "bool": boolean;
        "disabled": boolean;
        "dynamicNu"?: number;
        "dynamicStr"?: string;
        "nu": number;
        "null": string | null;
        "otherBool": boolean;
        "str": string;
        "undef"?: string;
    }
    interface ReparentStyleNoVars {
    }
    interface ReparentStyleWithVars {
    }
    interface SassCmp {
    }
    interface ScopedBasic {
    }
    interface ScopedBasicRoot {
    }
    interface ShadowDomArray {
        "values": number[];
    }
    interface ShadowDomArrayRoot {
    }
    interface ShadowDomBasic {
    }
    interface ShadowDomBasicRoot {
    }
    interface ShadowDomMode {
        /**
          * The mode determines which platform styles to use.
         */
        "colormode"?: string;
    }
    interface ShadowDomModeRoot {
    }
    interface ShadowDomSlotBasic {
    }
    interface ShadowDomSlotNested {
        "i"?: number;
    }
    interface ShadowDomSlotNestedRoot {
    }
    interface SlotArrayBasic {
    }
    interface SlotArrayComplex {
    }
    interface SlotArrayComplexRoot {
    }
    interface SlotArrayTop {
    }
    interface SlotBasic {
    }
    interface SlotBasicOrder {
    }
    interface SlotBasicOrderRoot {
    }
    interface SlotBasicRoot {
    }
    interface SlotChildrenRoot {
    }
    interface SlotDynamicScopedList {
        "items": Array<string>;
    }
    interface SlotDynamicShadowList {
        "items": Array<string>;
    }
    interface SlotDynamicWrapper {
        "tag": string;
    }
    interface SlotDynamicWrapperRoot {
    }
    interface SlotFallback {
        "inc": number;
    }
    interface SlotFallbackRoot {
    }
    interface SlotHtml {
        "inc": number;
    }
    interface SlotLightDomContent {
    }
    interface SlotLightDomRoot {
    }
    interface SlotLightList {
    }
    interface SlotLightScopedList {
    }
    interface SlotListLightRoot {
        "items": string[];
    }
    interface SlotListLightScopedRoot {
        "items": string[];
    }
    interface SlotMapOrder {
    }
    interface SlotMapOrderRoot {
    }
    interface SlotNestedOrderChild {
    }
    interface SlotNestedOrderParent {
    }
    interface SlotNgIf {
    }
    interface SlotNoDefault {
    }
    interface SlotReorder {
        "reordered": boolean;
    }
    interface SlotReorderRoot {
    }
    interface SlotReplaceWrapper {
        "href"?: string;
    }
    interface SlotReplaceWrapperRoot {
    }
    interface SlottedCss {
    }
    interface StaticStyles {
    }
    interface StencilSibling {
    }
    interface StylusCmp {
    }
    interface SvgAttr {
    }
    interface SvgClass {
    }
    interface Tag3dComponent {
    }
    interface Tag88 {
    }
}
export namespace ComponentEvents {
    interface AppendChildCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAppendChildElement;
    }
    interface AttributeBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeBasicElement;
    }
    interface AttributeBasicRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeBasicRootElement;
    }
    interface AttributeBooleanCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeBooleanElement;
    }
    interface AttributeBooleanRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeBooleanRootElement;
    }
    interface AttributeComplexCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeComplexElement;
    }
    interface AttributeHostCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeHostElement;
    }
    interface AttributeHtmlRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLAttributeHtmlRootElement;
    }
    interface BadSharedJsxCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLBadSharedJsxElement;
    }
    interface BuildDataCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLBuildDataElement;
    }
    interface ChildReflectNanAttributeCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLChildReflectNanAttributeElement;
    }
    interface ChildWithReflectionCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLChildWithReflectionElement;
    }
    interface CmpLabelCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCmpLabelElement;
    }
    interface CmpLabelWithSlotSiblingCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCmpLabelWithSlotSiblingElement;
    }
    interface ConditionalBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLConditionalBasicElement;
    }
    interface ConditionalRerenderCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLConditionalRerenderElement;
    }
    interface ConditionalRerenderRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLConditionalRerenderRootElement;
    }
    interface CssCmpCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCssCmpElement;
    }
    interface CssVariablesNoEncapsulationCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCssVariablesNoEncapsulationElement;
    }
    interface CssVariablesShadowDomCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCssVariablesShadowDomElement;
    }
    interface CustomElementChildCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementChildElement;
    }
    interface CustomElementChildDifferentNameThanClassCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementChildDifferentNameThanClassElement;
    }
    interface CustomElementNestedChildCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementNestedChildElement;
    }
    interface CustomElementRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementRootElement;
    }
    interface CustomElementRootDifferentNameThanClassCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementRootDifferentNameThanClassElement;
    }
    interface CustomElementsDelegatesFocusCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementsDelegatesFocusElement;
    }
    interface CustomElementsNoDelegatesFocusCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomElementsNoDelegatesFocusElement;
    }
    interface CustomEventRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLCustomEventRootElement;
    }
    interface DelegatesFocusCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDelegatesFocusElement;
    }
    interface DomReattachCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDomReattachElement;
    }
    interface DomReattachCloneCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDomReattachCloneElement;
    }
    interface DomReattachCloneDeepSlotCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDomReattachCloneDeepSlotElement;
    }
    interface DomReattachCloneHostCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDomReattachCloneHostElement;
    }
    interface DynamicCssVariableCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDynamicCssVariableElement;
    }
    interface DynamicImportCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLDynamicImportElement;
    }
    interface Es5AddclassSvgCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLEs5AddclassSvgElement;
    }
    interface EsmImportCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLEsmImportElement;
    }
    interface EventBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLEventBasicElement;
    }
    interface EventCustomTypeCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLEventCustomTypeElement;
    }
    interface ExternalImportACustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLExternalImportAElement;
    }
    interface ExternalImportBCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLExternalImportBElement;
    }
    interface ExternalImportCCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLExternalImportCElement;
    }
    interface FactoryJsxCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLFactoryJsxElement;
    }
    interface ImageImportCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLImageImportElement;
    }
    interface InitCssRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLInitCssRootElement;
    }
    interface InputBasicRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLInputBasicRootElement;
    }
    interface JsonBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLJsonBasicElement;
    }
    interface KeyReorderCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLKeyReorderElement;
    }
    interface KeyReorderRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLKeyReorderRootElement;
    }
    interface LessCmpCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLessCmpElement;
    }
    interface LifecycleAsyncACustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleAsyncAElement;
    }
    interface LifecycleAsyncBCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleAsyncBElement;
    }
    interface LifecycleAsyncCCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleAsyncCElement;
    }
    interface LifecycleBasicACustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleBasicAElement;
    }
    interface LifecycleBasicBCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleBasicBElement;
    }
    interface LifecycleBasicCCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleBasicCElement;
    }
    interface LifecycleNestedACustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleNestedAElement;
    }
    interface LifecycleNestedBCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleNestedBElement;
    }
    interface LifecycleNestedCCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleNestedCElement;
    }
    interface LifecycleUnloadACustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleUnloadAElement;
    }
    interface LifecycleUnloadBCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleUnloadBElement;
    }
    interface LifecycleUnloadRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleUnloadRootElement;
    }
    interface LifecycleUpdateACustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleUpdateAElement;
    }
    interface LifecycleUpdateBCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleUpdateBElement;
    }
    interface LifecycleUpdateCCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLLifecycleUpdateCElement;
    }
    interface ListenJsxCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLListenJsxElement;
    }
    interface ListenJsxRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLListenJsxRootElement;
    }
    interface ListenReattachCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLListenReattachElement;
    }
    interface ListenWindowCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLListenWindowElement;
    }
    interface NoDelegatesFocusCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLNoDelegatesFocusElement;
    }
    interface NodeGlobalsCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLNodeGlobalsElement;
    }
    interface NodeResolutionCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLNodeResolutionElement;
    }
    interface ParentReflectNanAttributeCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLParentReflectNanAttributeElement;
    }
    interface ParentWithReflectChildCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLParentWithReflectChildElement;
    }
    interface ReflectNanAttributeCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLReflectNanAttributeElement;
    }
    interface ReflectNanAttributeHyphenCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLReflectNanAttributeHyphenElement;
    }
    interface ReflectToAttrCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLReflectToAttrElement;
    }
    interface ReparentStyleNoVarsCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLReparentStyleNoVarsElement;
    }
    interface ReparentStyleWithVarsCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLReparentStyleWithVarsElement;
    }
    interface SassCmpCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSassCmpElement;
    }
    interface ScopedBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLScopedBasicElement;
    }
    interface ScopedBasicRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLScopedBasicRootElement;
    }
    interface ShadowDomArrayCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomArrayElement;
    }
    interface ShadowDomArrayRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomArrayRootElement;
    }
    interface ShadowDomBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomBasicElement;
    }
    interface ShadowDomBasicRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomBasicRootElement;
    }
    interface ShadowDomModeCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomModeElement;
    }
    interface ShadowDomModeRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomModeRootElement;
    }
    interface ShadowDomSlotBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomSlotBasicElement;
    }
    interface ShadowDomSlotNestedCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomSlotNestedElement;
    }
    interface ShadowDomSlotNestedRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLShadowDomSlotNestedRootElement;
    }
    interface SlotArrayBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotArrayBasicElement;
    }
    interface SlotArrayComplexCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotArrayComplexElement;
    }
    interface SlotArrayComplexRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotArrayComplexRootElement;
    }
    interface SlotArrayTopCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotArrayTopElement;
    }
    interface SlotBasicCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotBasicElement;
    }
    interface SlotBasicOrderCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotBasicOrderElement;
    }
    interface SlotBasicOrderRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotBasicOrderRootElement;
    }
    interface SlotBasicRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotBasicRootElement;
    }
    interface SlotChildrenRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotChildrenRootElement;
    }
    interface SlotDynamicScopedListCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotDynamicScopedListElement;
    }
    interface SlotDynamicShadowListCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotDynamicShadowListElement;
    }
    interface SlotDynamicWrapperCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotDynamicWrapperElement;
    }
    interface SlotDynamicWrapperRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotDynamicWrapperRootElement;
    }
    interface SlotFallbackCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotFallbackElement;
    }
    interface SlotFallbackRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotFallbackRootElement;
    }
    interface SlotHtmlCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotHtmlElement;
    }
    interface SlotLightDomContentCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotLightDomContentElement;
    }
    interface SlotLightDomRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotLightDomRootElement;
    }
    interface SlotLightListCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotLightListElement;
    }
    interface SlotLightScopedListCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotLightScopedListElement;
    }
    interface SlotListLightRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotListLightRootElement;
    }
    interface SlotListLightScopedRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotListLightScopedRootElement;
    }
    interface SlotMapOrderCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotMapOrderElement;
    }
    interface SlotMapOrderRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotMapOrderRootElement;
    }
    interface SlotNestedOrderChildCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotNestedOrderChildElement;
    }
    interface SlotNestedOrderParentCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotNestedOrderParentElement;
    }
    interface SlotNgIfCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotNgIfElement;
    }
    interface SlotNoDefaultCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotNoDefaultElement;
    }
    interface SlotReorderCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotReorderElement;
    }
    interface SlotReorderRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotReorderRootElement;
    }
    interface SlotReplaceWrapperCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotReplaceWrapperElement;
    }
    interface SlotReplaceWrapperRootCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlotReplaceWrapperRootElement;
    }
    interface SlottedCssCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSlottedCssElement;
    }
    interface StaticStylesCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLStaticStylesElement;
    }
    interface StencilSiblingCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLStencilSiblingElement;
    }
    interface StylusCmpCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLStylusCmpElement;
    }
    interface SvgAttrCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSvgAttrElement;
    }
    interface SvgClassCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLSvgClassElement;
    }
    interface Tag3dComponentCustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLTag3dComponentElement;
    }
    interface Tag88CustomEvent<T> extends CustomEvent<T> {
        detail: T;
        target: HTMLTag88Element;
    }
}
declare global {
    interface HTMLAppendChildElement extends Components.AppendChild, HTMLStencilElement {
    }
    var HTMLAppendChildElement: {
        prototype: HTMLAppendChildElement;
        new (): HTMLAppendChildElement;
    };
    interface HTMLAttributeBasicElement extends Components.AttributeBasic, HTMLStencilElement {
    }
    var HTMLAttributeBasicElement: {
        prototype: HTMLAttributeBasicElement;
        new (): HTMLAttributeBasicElement;
    };
    interface HTMLAttributeBasicRootElement extends Components.AttributeBasicRoot, HTMLStencilElement {
    }
    var HTMLAttributeBasicRootElement: {
        prototype: HTMLAttributeBasicRootElement;
        new (): HTMLAttributeBasicRootElement;
    };
    interface HTMLAttributeBooleanElement extends Components.AttributeBoolean, HTMLStencilElement {
    }
    var HTMLAttributeBooleanElement: {
        prototype: HTMLAttributeBooleanElement;
        new (): HTMLAttributeBooleanElement;
    };
    interface HTMLAttributeBooleanRootElement extends Components.AttributeBooleanRoot, HTMLStencilElement {
    }
    var HTMLAttributeBooleanRootElement: {
        prototype: HTMLAttributeBooleanRootElement;
        new (): HTMLAttributeBooleanRootElement;
    };
    interface HTMLAttributeComplexElement extends Components.AttributeComplex, HTMLStencilElement {
    }
    var HTMLAttributeComplexElement: {
        prototype: HTMLAttributeComplexElement;
        new (): HTMLAttributeComplexElement;
    };
    interface HTMLAttributeHostElement extends Components.AttributeHost, HTMLStencilElement {
    }
    var HTMLAttributeHostElement: {
        prototype: HTMLAttributeHostElement;
        new (): HTMLAttributeHostElement;
    };
    interface HTMLAttributeHtmlRootElement extends Components.AttributeHtmlRoot, HTMLStencilElement {
    }
    var HTMLAttributeHtmlRootElement: {
        prototype: HTMLAttributeHtmlRootElement;
        new (): HTMLAttributeHtmlRootElement;
    };
    interface HTMLBadSharedJsxElement extends Components.BadSharedJsx, HTMLStencilElement {
    }
    var HTMLBadSharedJsxElement: {
        prototype: HTMLBadSharedJsxElement;
        new (): HTMLBadSharedJsxElement;
    };
    interface HTMLBuildDataElement extends Components.BuildData, HTMLStencilElement {
    }
    var HTMLBuildDataElement: {
        prototype: HTMLBuildDataElement;
        new (): HTMLBuildDataElement;
    };
    interface HTMLChildReflectNanAttributeElement extends Components.ChildReflectNanAttribute, HTMLStencilElement {
    }
    var HTMLChildReflectNanAttributeElement: {
        prototype: HTMLChildReflectNanAttributeElement;
        new (): HTMLChildReflectNanAttributeElement;
    };
    interface HTMLChildWithReflectionElement extends Components.ChildWithReflection, HTMLStencilElement {
    }
    var HTMLChildWithReflectionElement: {
        prototype: HTMLChildWithReflectionElement;
        new (): HTMLChildWithReflectionElement;
    };
    interface HTMLCmpLabelElement extends Components.CmpLabel, HTMLStencilElement {
    }
    var HTMLCmpLabelElement: {
        prototype: HTMLCmpLabelElement;
        new (): HTMLCmpLabelElement;
    };
    interface HTMLCmpLabelWithSlotSiblingElement extends Components.CmpLabelWithSlotSibling, HTMLStencilElement {
    }
    var HTMLCmpLabelWithSlotSiblingElement: {
        prototype: HTMLCmpLabelWithSlotSiblingElement;
        new (): HTMLCmpLabelWithSlotSiblingElement;
    };
    interface HTMLConditionalBasicElement extends Components.ConditionalBasic, HTMLStencilElement {
    }
    var HTMLConditionalBasicElement: {
        prototype: HTMLConditionalBasicElement;
        new (): HTMLConditionalBasicElement;
    };
    interface HTMLConditionalRerenderElement extends Components.ConditionalRerender, HTMLStencilElement {
    }
    var HTMLConditionalRerenderElement: {
        prototype: HTMLConditionalRerenderElement;
        new (): HTMLConditionalRerenderElement;
    };
    interface HTMLConditionalRerenderRootElement extends Components.ConditionalRerenderRoot, HTMLStencilElement {
    }
    var HTMLConditionalRerenderRootElement: {
        prototype: HTMLConditionalRerenderRootElement;
        new (): HTMLConditionalRerenderRootElement;
    };
    interface HTMLCssCmpElement extends Components.CssCmp, HTMLStencilElement {
    }
    var HTMLCssCmpElement: {
        prototype: HTMLCssCmpElement;
        new (): HTMLCssCmpElement;
    };
    interface HTMLCssVariablesNoEncapsulationElement extends Components.CssVariablesNoEncapsulation, HTMLStencilElement {
    }
    var HTMLCssVariablesNoEncapsulationElement: {
        prototype: HTMLCssVariablesNoEncapsulationElement;
        new (): HTMLCssVariablesNoEncapsulationElement;
    };
    interface HTMLCssVariablesShadowDomElement extends Components.CssVariablesShadowDom, HTMLStencilElement {
    }
    var HTMLCssVariablesShadowDomElement: {
        prototype: HTMLCssVariablesShadowDomElement;
        new (): HTMLCssVariablesShadowDomElement;
    };
    interface HTMLCustomElementChildElement extends Components.CustomElementChild, HTMLStencilElement {
    }
    var HTMLCustomElementChildElement: {
        prototype: HTMLCustomElementChildElement;
        new (): HTMLCustomElementChildElement;
    };
    interface HTMLCustomElementChildDifferentNameThanClassElement extends Components.CustomElementChildDifferentNameThanClass, HTMLStencilElement {
    }
    var HTMLCustomElementChildDifferentNameThanClassElement: {
        prototype: HTMLCustomElementChildDifferentNameThanClassElement;
        new (): HTMLCustomElementChildDifferentNameThanClassElement;
    };
    interface HTMLCustomElementNestedChildElement extends Components.CustomElementNestedChild, HTMLStencilElement {
    }
    var HTMLCustomElementNestedChildElement: {
        prototype: HTMLCustomElementNestedChildElement;
        new (): HTMLCustomElementNestedChildElement;
    };
    interface HTMLCustomElementRootElement extends Components.CustomElementRoot, HTMLStencilElement {
    }
    var HTMLCustomElementRootElement: {
        prototype: HTMLCustomElementRootElement;
        new (): HTMLCustomElementRootElement;
    };
    interface HTMLCustomElementRootDifferentNameThanClassElement extends Components.CustomElementRootDifferentNameThanClass, HTMLStencilElement {
    }
    var HTMLCustomElementRootDifferentNameThanClassElement: {
        prototype: HTMLCustomElementRootDifferentNameThanClassElement;
        new (): HTMLCustomElementRootDifferentNameThanClassElement;
    };
    interface HTMLCustomElementsDelegatesFocusElement extends Components.CustomElementsDelegatesFocus, HTMLStencilElement {
    }
    var HTMLCustomElementsDelegatesFocusElement: {
        prototype: HTMLCustomElementsDelegatesFocusElement;
        new (): HTMLCustomElementsDelegatesFocusElement;
    };
    interface HTMLCustomElementsNoDelegatesFocusElement extends Components.CustomElementsNoDelegatesFocus, HTMLStencilElement {
    }
    var HTMLCustomElementsNoDelegatesFocusElement: {
        prototype: HTMLCustomElementsNoDelegatesFocusElement;
        new (): HTMLCustomElementsNoDelegatesFocusElement;
    };
    interface HTMLCustomEventRootElement extends Components.CustomEventRoot, HTMLStencilElement {
    }
    var HTMLCustomEventRootElement: {
        prototype: HTMLCustomEventRootElement;
        new (): HTMLCustomEventRootElement;
    };
    interface HTMLDelegatesFocusElement extends Components.DelegatesFocus, HTMLStencilElement {
    }
    var HTMLDelegatesFocusElement: {
        prototype: HTMLDelegatesFocusElement;
        new (): HTMLDelegatesFocusElement;
    };
    interface HTMLDomReattachElement extends Components.DomReattach, HTMLStencilElement {
    }
    var HTMLDomReattachElement: {
        prototype: HTMLDomReattachElement;
        new (): HTMLDomReattachElement;
    };
    interface HTMLDomReattachCloneElement extends Components.DomReattachClone, HTMLStencilElement {
    }
    var HTMLDomReattachCloneElement: {
        prototype: HTMLDomReattachCloneElement;
        new (): HTMLDomReattachCloneElement;
    };
    interface HTMLDomReattachCloneDeepSlotElement extends Components.DomReattachCloneDeepSlot, HTMLStencilElement {
    }
    var HTMLDomReattachCloneDeepSlotElement: {
        prototype: HTMLDomReattachCloneDeepSlotElement;
        new (): HTMLDomReattachCloneDeepSlotElement;
    };
    interface HTMLDomReattachCloneHostElement extends Components.DomReattachCloneHost, HTMLStencilElement {
    }
    var HTMLDomReattachCloneHostElement: {
        prototype: HTMLDomReattachCloneHostElement;
        new (): HTMLDomReattachCloneHostElement;
    };
    interface HTMLDynamicCssVariableElement extends Components.DynamicCssVariable, HTMLStencilElement {
    }
    var HTMLDynamicCssVariableElement: {
        prototype: HTMLDynamicCssVariableElement;
        new (): HTMLDynamicCssVariableElement;
    };
    interface HTMLDynamicImportElement extends Components.DynamicImport, HTMLStencilElement {
    }
    var HTMLDynamicImportElement: {
        prototype: HTMLDynamicImportElement;
        new (): HTMLDynamicImportElement;
    };
    interface HTMLEs5AddclassSvgElement extends Components.Es5AddclassSvg, HTMLStencilElement {
    }
    var HTMLEs5AddclassSvgElement: {
        prototype: HTMLEs5AddclassSvgElement;
        new (): HTMLEs5AddclassSvgElement;
    };
    interface HTMLEsmImportElement extends Components.EsmImport, HTMLStencilElement {
    }
    var HTMLEsmImportElement: {
        prototype: HTMLEsmImportElement;
        new (): HTMLEsmImportElement;
    };
    interface HTMLEventBasicElement extends Components.EventBasic, HTMLStencilElement {
    }
    var HTMLEventBasicElement: {
        prototype: HTMLEventBasicElement;
        new (): HTMLEventBasicElement;
    };
    interface HTMLEventCustomTypeElement extends Components.EventCustomType, HTMLStencilElement {
    }
    var HTMLEventCustomTypeElement: {
        prototype: HTMLEventCustomTypeElement;
        new (): HTMLEventCustomTypeElement;
    };
    interface HTMLExternalImportAElement extends Components.ExternalImportA, HTMLStencilElement {
    }
    var HTMLExternalImportAElement: {
        prototype: HTMLExternalImportAElement;
        new (): HTMLExternalImportAElement;
    };
    interface HTMLExternalImportBElement extends Components.ExternalImportB, HTMLStencilElement {
    }
    var HTMLExternalImportBElement: {
        prototype: HTMLExternalImportBElement;
        new (): HTMLExternalImportBElement;
    };
    interface HTMLExternalImportCElement extends Components.ExternalImportC, HTMLStencilElement {
    }
    var HTMLExternalImportCElement: {
        prototype: HTMLExternalImportCElement;
        new (): HTMLExternalImportCElement;
    };
    interface HTMLFactoryJsxElement extends Components.FactoryJsx, HTMLStencilElement {
    }
    var HTMLFactoryJsxElement: {
        prototype: HTMLFactoryJsxElement;
        new (): HTMLFactoryJsxElement;
    };
    interface HTMLImageImportElement extends Components.ImageImport, HTMLStencilElement {
    }
    var HTMLImageImportElement: {
        prototype: HTMLImageImportElement;
        new (): HTMLImageImportElement;
    };
    interface HTMLInitCssRootElement extends Components.InitCssRoot, HTMLStencilElement {
    }
    var HTMLInitCssRootElement: {
        prototype: HTMLInitCssRootElement;
        new (): HTMLInitCssRootElement;
    };
    interface HTMLInputBasicRootElement extends Components.InputBasicRoot, HTMLStencilElement {
    }
    var HTMLInputBasicRootElement: {
        prototype: HTMLInputBasicRootElement;
        new (): HTMLInputBasicRootElement;
    };
    interface HTMLJsonBasicElement extends Components.JsonBasic, HTMLStencilElement {
    }
    var HTMLJsonBasicElement: {
        prototype: HTMLJsonBasicElement;
        new (): HTMLJsonBasicElement;
    };
    interface HTMLKeyReorderElement extends Components.KeyReorder, HTMLStencilElement {
    }
    var HTMLKeyReorderElement: {
        prototype: HTMLKeyReorderElement;
        new (): HTMLKeyReorderElement;
    };
    interface HTMLKeyReorderRootElement extends Components.KeyReorderRoot, HTMLStencilElement {
    }
    var HTMLKeyReorderRootElement: {
        prototype: HTMLKeyReorderRootElement;
        new (): HTMLKeyReorderRootElement;
    };
    interface HTMLLessCmpElement extends Components.LessCmp, HTMLStencilElement {
    }
    var HTMLLessCmpElement: {
        prototype: HTMLLessCmpElement;
        new (): HTMLLessCmpElement;
    };
    interface HTMLLifecycleAsyncAElement extends Components.LifecycleAsyncA, HTMLStencilElement {
    }
    var HTMLLifecycleAsyncAElement: {
        prototype: HTMLLifecycleAsyncAElement;
        new (): HTMLLifecycleAsyncAElement;
    };
    interface HTMLLifecycleAsyncBElement extends Components.LifecycleAsyncB, HTMLStencilElement {
    }
    var HTMLLifecycleAsyncBElement: {
        prototype: HTMLLifecycleAsyncBElement;
        new (): HTMLLifecycleAsyncBElement;
    };
    interface HTMLLifecycleAsyncCElement extends Components.LifecycleAsyncC, HTMLStencilElement {
    }
    var HTMLLifecycleAsyncCElement: {
        prototype: HTMLLifecycleAsyncCElement;
        new (): HTMLLifecycleAsyncCElement;
    };
    interface HTMLLifecycleBasicAElement extends Components.LifecycleBasicA, HTMLStencilElement {
    }
    var HTMLLifecycleBasicAElement: {
        prototype: HTMLLifecycleBasicAElement;
        new (): HTMLLifecycleBasicAElement;
    };
    interface HTMLLifecycleBasicBElement extends Components.LifecycleBasicB, HTMLStencilElement {
    }
    var HTMLLifecycleBasicBElement: {
        prototype: HTMLLifecycleBasicBElement;
        new (): HTMLLifecycleBasicBElement;
    };
    interface HTMLLifecycleBasicCElement extends Components.LifecycleBasicC, HTMLStencilElement {
    }
    var HTMLLifecycleBasicCElement: {
        prototype: HTMLLifecycleBasicCElement;
        new (): HTMLLifecycleBasicCElement;
    };
    interface HTMLLifecycleNestedAElement extends Components.LifecycleNestedA, HTMLStencilElement {
    }
    var HTMLLifecycleNestedAElement: {
        prototype: HTMLLifecycleNestedAElement;
        new (): HTMLLifecycleNestedAElement;
    };
    interface HTMLLifecycleNestedBElement extends Components.LifecycleNestedB, HTMLStencilElement {
    }
    var HTMLLifecycleNestedBElement: {
        prototype: HTMLLifecycleNestedBElement;
        new (): HTMLLifecycleNestedBElement;
    };
    interface HTMLLifecycleNestedCElement extends Components.LifecycleNestedC, HTMLStencilElement {
    }
    var HTMLLifecycleNestedCElement: {
        prototype: HTMLLifecycleNestedCElement;
        new (): HTMLLifecycleNestedCElement;
    };
    interface HTMLLifecycleUnloadAElement extends Components.LifecycleUnloadA, HTMLStencilElement {
    }
    var HTMLLifecycleUnloadAElement: {
        prototype: HTMLLifecycleUnloadAElement;
        new (): HTMLLifecycleUnloadAElement;
    };
    interface HTMLLifecycleUnloadBElement extends Components.LifecycleUnloadB, HTMLStencilElement {
    }
    var HTMLLifecycleUnloadBElement: {
        prototype: HTMLLifecycleUnloadBElement;
        new (): HTMLLifecycleUnloadBElement;
    };
    interface HTMLLifecycleUnloadRootElement extends Components.LifecycleUnloadRoot, HTMLStencilElement {
    }
    var HTMLLifecycleUnloadRootElement: {
        prototype: HTMLLifecycleUnloadRootElement;
        new (): HTMLLifecycleUnloadRootElement;
    };
    interface HTMLLifecycleUpdateAElement extends Components.LifecycleUpdateA, HTMLStencilElement {
    }
    var HTMLLifecycleUpdateAElement: {
        prototype: HTMLLifecycleUpdateAElement;
        new (): HTMLLifecycleUpdateAElement;
    };
    interface HTMLLifecycleUpdateBElement extends Components.LifecycleUpdateB, HTMLStencilElement {
    }
    var HTMLLifecycleUpdateBElement: {
        prototype: HTMLLifecycleUpdateBElement;
        new (): HTMLLifecycleUpdateBElement;
    };
    interface HTMLLifecycleUpdateCElement extends Components.LifecycleUpdateC, HTMLStencilElement {
    }
    var HTMLLifecycleUpdateCElement: {
        prototype: HTMLLifecycleUpdateCElement;
        new (): HTMLLifecycleUpdateCElement;
    };
    interface HTMLListenJsxElement extends Components.ListenJsx, HTMLStencilElement {
    }
    var HTMLListenJsxElement: {
        prototype: HTMLListenJsxElement;
        new (): HTMLListenJsxElement;
    };
    interface HTMLListenJsxRootElement extends Components.ListenJsxRoot, HTMLStencilElement {
    }
    var HTMLListenJsxRootElement: {
        prototype: HTMLListenJsxRootElement;
        new (): HTMLListenJsxRootElement;
    };
    interface HTMLListenReattachElement extends Components.ListenReattach, HTMLStencilElement {
    }
    var HTMLListenReattachElement: {
        prototype: HTMLListenReattachElement;
        new (): HTMLListenReattachElement;
    };
    interface HTMLListenWindowElement extends Components.ListenWindow, HTMLStencilElement {
    }
    var HTMLListenWindowElement: {
        prototype: HTMLListenWindowElement;
        new (): HTMLListenWindowElement;
    };
    interface HTMLNoDelegatesFocusElement extends Components.NoDelegatesFocus, HTMLStencilElement {
    }
    var HTMLNoDelegatesFocusElement: {
        prototype: HTMLNoDelegatesFocusElement;
        new (): HTMLNoDelegatesFocusElement;
    };
    interface HTMLNodeGlobalsElement extends Components.NodeGlobals, HTMLStencilElement {
    }
    var HTMLNodeGlobalsElement: {
        prototype: HTMLNodeGlobalsElement;
        new (): HTMLNodeGlobalsElement;
    };
    interface HTMLNodeResolutionElement extends Components.NodeResolution, HTMLStencilElement {
    }
    var HTMLNodeResolutionElement: {
        prototype: HTMLNodeResolutionElement;
        new (): HTMLNodeResolutionElement;
    };
    interface HTMLParentReflectNanAttributeElement extends Components.ParentReflectNanAttribute, HTMLStencilElement {
    }
    var HTMLParentReflectNanAttributeElement: {
        prototype: HTMLParentReflectNanAttributeElement;
        new (): HTMLParentReflectNanAttributeElement;
    };
    interface HTMLParentWithReflectChildElement extends Components.ParentWithReflectChild, HTMLStencilElement {
    }
    var HTMLParentWithReflectChildElement: {
        prototype: HTMLParentWithReflectChildElement;
        new (): HTMLParentWithReflectChildElement;
    };
    interface HTMLReflectNanAttributeElement extends Components.ReflectNanAttribute, HTMLStencilElement {
    }
    var HTMLReflectNanAttributeElement: {
        prototype: HTMLReflectNanAttributeElement;
        new (): HTMLReflectNanAttributeElement;
    };
    interface HTMLReflectNanAttributeHyphenElement extends Components.ReflectNanAttributeHyphen, HTMLStencilElement {
    }
    var HTMLReflectNanAttributeHyphenElement: {
        prototype: HTMLReflectNanAttributeHyphenElement;
        new (): HTMLReflectNanAttributeHyphenElement;
    };
    interface HTMLReflectToAttrElement extends Components.ReflectToAttr, HTMLStencilElement {
    }
    var HTMLReflectToAttrElement: {
        prototype: HTMLReflectToAttrElement;
        new (): HTMLReflectToAttrElement;
    };
    interface HTMLReparentStyleNoVarsElement extends Components.ReparentStyleNoVars, HTMLStencilElement {
    }
    var HTMLReparentStyleNoVarsElement: {
        prototype: HTMLReparentStyleNoVarsElement;
        new (): HTMLReparentStyleNoVarsElement;
    };
    interface HTMLReparentStyleWithVarsElement extends Components.ReparentStyleWithVars, HTMLStencilElement {
    }
    var HTMLReparentStyleWithVarsElement: {
        prototype: HTMLReparentStyleWithVarsElement;
        new (): HTMLReparentStyleWithVarsElement;
    };
    interface HTMLSassCmpElement extends Components.SassCmp, HTMLStencilElement {
    }
    var HTMLSassCmpElement: {
        prototype: HTMLSassCmpElement;
        new (): HTMLSassCmpElement;
    };
    interface HTMLScopedBasicElement extends Components.ScopedBasic, HTMLStencilElement {
    }
    var HTMLScopedBasicElement: {
        prototype: HTMLScopedBasicElement;
        new (): HTMLScopedBasicElement;
    };
    interface HTMLScopedBasicRootElement extends Components.ScopedBasicRoot, HTMLStencilElement {
    }
    var HTMLScopedBasicRootElement: {
        prototype: HTMLScopedBasicRootElement;
        new (): HTMLScopedBasicRootElement;
    };
    interface HTMLShadowDomArrayElement extends Components.ShadowDomArray, HTMLStencilElement {
    }
    var HTMLShadowDomArrayElement: {
        prototype: HTMLShadowDomArrayElement;
        new (): HTMLShadowDomArrayElement;
    };
    interface HTMLShadowDomArrayRootElement extends Components.ShadowDomArrayRoot, HTMLStencilElement {
    }
    var HTMLShadowDomArrayRootElement: {
        prototype: HTMLShadowDomArrayRootElement;
        new (): HTMLShadowDomArrayRootElement;
    };
    interface HTMLShadowDomBasicElement extends Components.ShadowDomBasic, HTMLStencilElement {
    }
    var HTMLShadowDomBasicElement: {
        prototype: HTMLShadowDomBasicElement;
        new (): HTMLShadowDomBasicElement;
    };
    interface HTMLShadowDomBasicRootElement extends Components.ShadowDomBasicRoot, HTMLStencilElement {
    }
    var HTMLShadowDomBasicRootElement: {
        prototype: HTMLShadowDomBasicRootElement;
        new (): HTMLShadowDomBasicRootElement;
    };
    interface HTMLShadowDomModeElement extends Components.ShadowDomMode, HTMLStencilElement {
    }
    var HTMLShadowDomModeElement: {
        prototype: HTMLShadowDomModeElement;
        new (): HTMLShadowDomModeElement;
    };
    interface HTMLShadowDomModeRootElement extends Components.ShadowDomModeRoot, HTMLStencilElement {
    }
    var HTMLShadowDomModeRootElement: {
        prototype: HTMLShadowDomModeRootElement;
        new (): HTMLShadowDomModeRootElement;
    };
    interface HTMLShadowDomSlotBasicElement extends Components.ShadowDomSlotBasic, HTMLStencilElement {
    }
    var HTMLShadowDomSlotBasicElement: {
        prototype: HTMLShadowDomSlotBasicElement;
        new (): HTMLShadowDomSlotBasicElement;
    };
    interface HTMLShadowDomSlotNestedElement extends Components.ShadowDomSlotNested, HTMLStencilElement {
    }
    var HTMLShadowDomSlotNestedElement: {
        prototype: HTMLShadowDomSlotNestedElement;
        new (): HTMLShadowDomSlotNestedElement;
    };
    interface HTMLShadowDomSlotNestedRootElement extends Components.ShadowDomSlotNestedRoot, HTMLStencilElement {
    }
    var HTMLShadowDomSlotNestedRootElement: {
        prototype: HTMLShadowDomSlotNestedRootElement;
        new (): HTMLShadowDomSlotNestedRootElement;
    };
    interface HTMLSlotArrayBasicElement extends Components.SlotArrayBasic, HTMLStencilElement {
    }
    var HTMLSlotArrayBasicElement: {
        prototype: HTMLSlotArrayBasicElement;
        new (): HTMLSlotArrayBasicElement;
    };
    interface HTMLSlotArrayComplexElement extends Components.SlotArrayComplex, HTMLStencilElement {
    }
    var HTMLSlotArrayComplexElement: {
        prototype: HTMLSlotArrayComplexElement;
        new (): HTMLSlotArrayComplexElement;
    };
    interface HTMLSlotArrayComplexRootElement extends Components.SlotArrayComplexRoot, HTMLStencilElement {
    }
    var HTMLSlotArrayComplexRootElement: {
        prototype: HTMLSlotArrayComplexRootElement;
        new (): HTMLSlotArrayComplexRootElement;
    };
    interface HTMLSlotArrayTopElement extends Components.SlotArrayTop, HTMLStencilElement {
    }
    var HTMLSlotArrayTopElement: {
        prototype: HTMLSlotArrayTopElement;
        new (): HTMLSlotArrayTopElement;
    };
    interface HTMLSlotBasicElement extends Components.SlotBasic, HTMLStencilElement {
    }
    var HTMLSlotBasicElement: {
        prototype: HTMLSlotBasicElement;
        new (): HTMLSlotBasicElement;
    };
    interface HTMLSlotBasicOrderElement extends Components.SlotBasicOrder, HTMLStencilElement {
    }
    var HTMLSlotBasicOrderElement: {
        prototype: HTMLSlotBasicOrderElement;
        new (): HTMLSlotBasicOrderElement;
    };
    interface HTMLSlotBasicOrderRootElement extends Components.SlotBasicOrderRoot, HTMLStencilElement {
    }
    var HTMLSlotBasicOrderRootElement: {
        prototype: HTMLSlotBasicOrderRootElement;
        new (): HTMLSlotBasicOrderRootElement;
    };
    interface HTMLSlotBasicRootElement extends Components.SlotBasicRoot, HTMLStencilElement {
    }
    var HTMLSlotBasicRootElement: {
        prototype: HTMLSlotBasicRootElement;
        new (): HTMLSlotBasicRootElement;
    };
    interface HTMLSlotChildrenRootElement extends Components.SlotChildrenRoot, HTMLStencilElement {
    }
    var HTMLSlotChildrenRootElement: {
        prototype: HTMLSlotChildrenRootElement;
        new (): HTMLSlotChildrenRootElement;
    };
    interface HTMLSlotDynamicScopedListElement extends Components.SlotDynamicScopedList, HTMLStencilElement {
    }
    var HTMLSlotDynamicScopedListElement: {
        prototype: HTMLSlotDynamicScopedListElement;
        new (): HTMLSlotDynamicScopedListElement;
    };
    interface HTMLSlotDynamicShadowListElement extends Components.SlotDynamicShadowList, HTMLStencilElement {
    }
    var HTMLSlotDynamicShadowListElement: {
        prototype: HTMLSlotDynamicShadowListElement;
        new (): HTMLSlotDynamicShadowListElement;
    };
    interface HTMLSlotDynamicWrapperElement extends Components.SlotDynamicWrapper, HTMLStencilElement {
    }
    var HTMLSlotDynamicWrapperElement: {
        prototype: HTMLSlotDynamicWrapperElement;
        new (): HTMLSlotDynamicWrapperElement;
    };
    interface HTMLSlotDynamicWrapperRootElement extends Components.SlotDynamicWrapperRoot, HTMLStencilElement {
    }
    var HTMLSlotDynamicWrapperRootElement: {
        prototype: HTMLSlotDynamicWrapperRootElement;
        new (): HTMLSlotDynamicWrapperRootElement;
    };
    interface HTMLSlotFallbackElement extends Components.SlotFallback, HTMLStencilElement {
    }
    var HTMLSlotFallbackElement: {
        prototype: HTMLSlotFallbackElement;
        new (): HTMLSlotFallbackElement;
    };
    interface HTMLSlotFallbackRootElement extends Components.SlotFallbackRoot, HTMLStencilElement {
    }
    var HTMLSlotFallbackRootElement: {
        prototype: HTMLSlotFallbackRootElement;
        new (): HTMLSlotFallbackRootElement;
    };
    interface HTMLSlotHtmlElement extends Components.SlotHtml, HTMLStencilElement {
    }
    var HTMLSlotHtmlElement: {
        prototype: HTMLSlotHtmlElement;
        new (): HTMLSlotHtmlElement;
    };
    interface HTMLSlotLightDomContentElement extends Components.SlotLightDomContent, HTMLStencilElement {
    }
    var HTMLSlotLightDomContentElement: {
        prototype: HTMLSlotLightDomContentElement;
        new (): HTMLSlotLightDomContentElement;
    };
    interface HTMLSlotLightDomRootElement extends Components.SlotLightDomRoot, HTMLStencilElement {
    }
    var HTMLSlotLightDomRootElement: {
        prototype: HTMLSlotLightDomRootElement;
        new (): HTMLSlotLightDomRootElement;
    };
    interface HTMLSlotLightListElement extends Components.SlotLightList, HTMLStencilElement {
    }
    var HTMLSlotLightListElement: {
        prototype: HTMLSlotLightListElement;
        new (): HTMLSlotLightListElement;
    };
    interface HTMLSlotLightScopedListElement extends Components.SlotLightScopedList, HTMLStencilElement {
    }
    var HTMLSlotLightScopedListElement: {
        prototype: HTMLSlotLightScopedListElement;
        new (): HTMLSlotLightScopedListElement;
    };
    interface HTMLSlotListLightRootElement extends Components.SlotListLightRoot, HTMLStencilElement {
    }
    var HTMLSlotListLightRootElement: {
        prototype: HTMLSlotListLightRootElement;
        new (): HTMLSlotListLightRootElement;
    };
    interface HTMLSlotListLightScopedRootElement extends Components.SlotListLightScopedRoot, HTMLStencilElement {
    }
    var HTMLSlotListLightScopedRootElement: {
        prototype: HTMLSlotListLightScopedRootElement;
        new (): HTMLSlotListLightScopedRootElement;
    };
    interface HTMLSlotMapOrderElement extends Components.SlotMapOrder, HTMLStencilElement {
    }
    var HTMLSlotMapOrderElement: {
        prototype: HTMLSlotMapOrderElement;
        new (): HTMLSlotMapOrderElement;
    };
    interface HTMLSlotMapOrderRootElement extends Components.SlotMapOrderRoot, HTMLStencilElement {
    }
    var HTMLSlotMapOrderRootElement: {
        prototype: HTMLSlotMapOrderRootElement;
        new (): HTMLSlotMapOrderRootElement;
    };
    interface HTMLSlotNestedOrderChildElement extends Components.SlotNestedOrderChild, HTMLStencilElement {
    }
    var HTMLSlotNestedOrderChildElement: {
        prototype: HTMLSlotNestedOrderChildElement;
        new (): HTMLSlotNestedOrderChildElement;
    };
    interface HTMLSlotNestedOrderParentElement extends Components.SlotNestedOrderParent, HTMLStencilElement {
    }
    var HTMLSlotNestedOrderParentElement: {
        prototype: HTMLSlotNestedOrderParentElement;
        new (): HTMLSlotNestedOrderParentElement;
    };
    interface HTMLSlotNgIfElement extends Components.SlotNgIf, HTMLStencilElement {
    }
    var HTMLSlotNgIfElement: {
        prototype: HTMLSlotNgIfElement;
        new (): HTMLSlotNgIfElement;
    };
    interface HTMLSlotNoDefaultElement extends Components.SlotNoDefault, HTMLStencilElement {
    }
    var HTMLSlotNoDefaultElement: {
        prototype: HTMLSlotNoDefaultElement;
        new (): HTMLSlotNoDefaultElement;
    };
    interface HTMLSlotReorderElement extends Components.SlotReorder, HTMLStencilElement {
    }
    var HTMLSlotReorderElement: {
        prototype: HTMLSlotReorderElement;
        new (): HTMLSlotReorderElement;
    };
    interface HTMLSlotReorderRootElement extends Components.SlotReorderRoot, HTMLStencilElement {
    }
    var HTMLSlotReorderRootElement: {
        prototype: HTMLSlotReorderRootElement;
        new (): HTMLSlotReorderRootElement;
    };
    interface HTMLSlotReplaceWrapperElement extends Components.SlotReplaceWrapper, HTMLStencilElement {
    }
    var HTMLSlotReplaceWrapperElement: {
        prototype: HTMLSlotReplaceWrapperElement;
        new (): HTMLSlotReplaceWrapperElement;
    };
    interface HTMLSlotReplaceWrapperRootElement extends Components.SlotReplaceWrapperRoot, HTMLStencilElement {
    }
    var HTMLSlotReplaceWrapperRootElement: {
        prototype: HTMLSlotReplaceWrapperRootElement;
        new (): HTMLSlotReplaceWrapperRootElement;
    };
    interface HTMLSlottedCssElement extends Components.SlottedCss, HTMLStencilElement {
    }
    var HTMLSlottedCssElement: {
        prototype: HTMLSlottedCssElement;
        new (): HTMLSlottedCssElement;
    };
    interface HTMLStaticStylesElement extends Components.StaticStyles, HTMLStencilElement {
    }
    var HTMLStaticStylesElement: {
        prototype: HTMLStaticStylesElement;
        new (): HTMLStaticStylesElement;
    };
    interface HTMLStencilSiblingElement extends Components.StencilSibling, HTMLStencilElement {
    }
    var HTMLStencilSiblingElement: {
        prototype: HTMLStencilSiblingElement;
        new (): HTMLStencilSiblingElement;
    };
    interface HTMLStylusCmpElement extends Components.StylusCmp, HTMLStencilElement {
    }
    var HTMLStylusCmpElement: {
        prototype: HTMLStylusCmpElement;
        new (): HTMLStylusCmpElement;
    };
    interface HTMLSvgAttrElement extends Components.SvgAttr, HTMLStencilElement {
    }
    var HTMLSvgAttrElement: {
        prototype: HTMLSvgAttrElement;
        new (): HTMLSvgAttrElement;
    };
    interface HTMLSvgClassElement extends Components.SvgClass, HTMLStencilElement {
    }
    var HTMLSvgClassElement: {
        prototype: HTMLSvgClassElement;
        new (): HTMLSvgClassElement;
    };
    interface HTMLTag3dComponentElement extends Components.Tag3dComponent, HTMLStencilElement {
    }
    var HTMLTag3dComponentElement: {
        prototype: HTMLTag3dComponentElement;
        new (): HTMLTag3dComponentElement;
    };
    interface HTMLTag88Element extends Components.Tag88, HTMLStencilElement {
    }
    var HTMLTag88Element: {
        prototype: HTMLTag88Element;
        new (): HTMLTag88Element;
    };
    interface HTMLElementTagNameMap {
        "append-child": HTMLAppendChildElement;
        "attribute-basic": HTMLAttributeBasicElement;
        "attribute-basic-root": HTMLAttributeBasicRootElement;
        "attribute-boolean": HTMLAttributeBooleanElement;
        "attribute-boolean-root": HTMLAttributeBooleanRootElement;
        "attribute-complex": HTMLAttributeComplexElement;
        "attribute-host": HTMLAttributeHostElement;
        "attribute-html-root": HTMLAttributeHtmlRootElement;
        "bad-shared-jsx": HTMLBadSharedJsxElement;
        "build-data": HTMLBuildDataElement;
        "child-reflect-nan-attribute": HTMLChildReflectNanAttributeElement;
        "child-with-reflection": HTMLChildWithReflectionElement;
        "cmp-label": HTMLCmpLabelElement;
        "cmp-label-with-slot-sibling": HTMLCmpLabelWithSlotSiblingElement;
        "conditional-basic": HTMLConditionalBasicElement;
        "conditional-rerender": HTMLConditionalRerenderElement;
        "conditional-rerender-root": HTMLConditionalRerenderRootElement;
        "css-cmp": HTMLCssCmpElement;
        "css-variables-no-encapsulation": HTMLCssVariablesNoEncapsulationElement;
        "css-variables-shadow-dom": HTMLCssVariablesShadowDomElement;
        "custom-element-child": HTMLCustomElementChildElement;
        "custom-element-child-different-name-than-class": HTMLCustomElementChildDifferentNameThanClassElement;
        "custom-element-nested-child": HTMLCustomElementNestedChildElement;
        "custom-element-root": HTMLCustomElementRootElement;
        "custom-element-root-different-name-than-class": HTMLCustomElementRootDifferentNameThanClassElement;
        "custom-elements-delegates-focus": HTMLCustomElementsDelegatesFocusElement;
        "custom-elements-no-delegates-focus": HTMLCustomElementsNoDelegatesFocusElement;
        "custom-event-root": HTMLCustomEventRootElement;
        "delegates-focus": HTMLDelegatesFocusElement;
        "dom-reattach": HTMLDomReattachElement;
        "dom-reattach-clone": HTMLDomReattachCloneElement;
        "dom-reattach-clone-deep-slot": HTMLDomReattachCloneDeepSlotElement;
        "dom-reattach-clone-host": HTMLDomReattachCloneHostElement;
        "dynamic-css-variable": HTMLDynamicCssVariableElement;
        "dynamic-import": HTMLDynamicImportElement;
        "es5-addclass-svg": HTMLEs5AddclassSvgElement;
        "esm-import": HTMLEsmImportElement;
        "event-basic": HTMLEventBasicElement;
        "event-custom-type": HTMLEventCustomTypeElement;
        "external-import-a": HTMLExternalImportAElement;
        "external-import-b": HTMLExternalImportBElement;
        "external-import-c": HTMLExternalImportCElement;
        "factory-jsx": HTMLFactoryJsxElement;
        "image-import": HTMLImageImportElement;
        "init-css-root": HTMLInitCssRootElement;
        "input-basic-root": HTMLInputBasicRootElement;
        "json-basic": HTMLJsonBasicElement;
        "key-reorder": HTMLKeyReorderElement;
        "key-reorder-root": HTMLKeyReorderRootElement;
        "less-cmp": HTMLLessCmpElement;
        "lifecycle-async-a": HTMLLifecycleAsyncAElement;
        "lifecycle-async-b": HTMLLifecycleAsyncBElement;
        "lifecycle-async-c": HTMLLifecycleAsyncCElement;
        "lifecycle-basic-a": HTMLLifecycleBasicAElement;
        "lifecycle-basic-b": HTMLLifecycleBasicBElement;
        "lifecycle-basic-c": HTMLLifecycleBasicCElement;
        "lifecycle-nested-a": HTMLLifecycleNestedAElement;
        "lifecycle-nested-b": HTMLLifecycleNestedBElement;
        "lifecycle-nested-c": HTMLLifecycleNestedCElement;
        "lifecycle-unload-a": HTMLLifecycleUnloadAElement;
        "lifecycle-unload-b": HTMLLifecycleUnloadBElement;
        "lifecycle-unload-root": HTMLLifecycleUnloadRootElement;
        "lifecycle-update-a": HTMLLifecycleUpdateAElement;
        "lifecycle-update-b": HTMLLifecycleUpdateBElement;
        "lifecycle-update-c": HTMLLifecycleUpdateCElement;
        "listen-jsx": HTMLListenJsxElement;
        "listen-jsx-root": HTMLListenJsxRootElement;
        "listen-reattach": HTMLListenReattachElement;
        "listen-window": HTMLListenWindowElement;
        "no-delegates-focus": HTMLNoDelegatesFocusElement;
        "node-globals": HTMLNodeGlobalsElement;
        "node-resolution": HTMLNodeResolutionElement;
        "parent-reflect-nan-attribute": HTMLParentReflectNanAttributeElement;
        "parent-with-reflect-child": HTMLParentWithReflectChildElement;
        "reflect-nan-attribute": HTMLReflectNanAttributeElement;
        "reflect-nan-attribute-hyphen": HTMLReflectNanAttributeHyphenElement;
        "reflect-to-attr": HTMLReflectToAttrElement;
        "reparent-style-no-vars": HTMLReparentStyleNoVarsElement;
        "reparent-style-with-vars": HTMLReparentStyleWithVarsElement;
        "sass-cmp": HTMLSassCmpElement;
        "scoped-basic": HTMLScopedBasicElement;
        "scoped-basic-root": HTMLScopedBasicRootElement;
        "shadow-dom-array": HTMLShadowDomArrayElement;
        "shadow-dom-array-root": HTMLShadowDomArrayRootElement;
        "shadow-dom-basic": HTMLShadowDomBasicElement;
        "shadow-dom-basic-root": HTMLShadowDomBasicRootElement;
        "shadow-dom-mode": HTMLShadowDomModeElement;
        "shadow-dom-mode-root": HTMLShadowDomModeRootElement;
        "shadow-dom-slot-basic": HTMLShadowDomSlotBasicElement;
        "shadow-dom-slot-nested": HTMLShadowDomSlotNestedElement;
        "shadow-dom-slot-nested-root": HTMLShadowDomSlotNestedRootElement;
        "slot-array-basic": HTMLSlotArrayBasicElement;
        "slot-array-complex": HTMLSlotArrayComplexElement;
        "slot-array-complex-root": HTMLSlotArrayComplexRootElement;
        "slot-array-top": HTMLSlotArrayTopElement;
        "slot-basic": HTMLSlotBasicElement;
        "slot-basic-order": HTMLSlotBasicOrderElement;
        "slot-basic-order-root": HTMLSlotBasicOrderRootElement;
        "slot-basic-root": HTMLSlotBasicRootElement;
        "slot-children-root": HTMLSlotChildrenRootElement;
        "slot-dynamic-scoped-list": HTMLSlotDynamicScopedListElement;
        "slot-dynamic-shadow-list": HTMLSlotDynamicShadowListElement;
        "slot-dynamic-wrapper": HTMLSlotDynamicWrapperElement;
        "slot-dynamic-wrapper-root": HTMLSlotDynamicWrapperRootElement;
        "slot-fallback": HTMLSlotFallbackElement;
        "slot-fallback-root": HTMLSlotFallbackRootElement;
        "slot-html": HTMLSlotHtmlElement;
        "slot-light-dom-content": HTMLSlotLightDomContentElement;
        "slot-light-dom-root": HTMLSlotLightDomRootElement;
        "slot-light-list": HTMLSlotLightListElement;
        "slot-light-scoped-list": HTMLSlotLightScopedListElement;
        "slot-list-light-root": HTMLSlotListLightRootElement;
        "slot-list-light-scoped-root": HTMLSlotListLightScopedRootElement;
        "slot-map-order": HTMLSlotMapOrderElement;
        "slot-map-order-root": HTMLSlotMapOrderRootElement;
        "slot-nested-order-child": HTMLSlotNestedOrderChildElement;
        "slot-nested-order-parent": HTMLSlotNestedOrderParentElement;
        "slot-ng-if": HTMLSlotNgIfElement;
        "slot-no-default": HTMLSlotNoDefaultElement;
        "slot-reorder": HTMLSlotReorderElement;
        "slot-reorder-root": HTMLSlotReorderRootElement;
        "slot-replace-wrapper": HTMLSlotReplaceWrapperElement;
        "slot-replace-wrapper-root": HTMLSlotReplaceWrapperRootElement;
        "slotted-css": HTMLSlottedCssElement;
        "static-styles": HTMLStaticStylesElement;
        "stencil-sibling": HTMLStencilSiblingElement;
        "stylus-cmp": HTMLStylusCmpElement;
        "svg-attr": HTMLSvgAttrElement;
        "svg-class": HTMLSvgClassElement;
        "tag-3d-component": HTMLTag3dComponentElement;
        "tag-88": HTMLTag88Element;
    }
}
declare namespace LocalJSX {
    interface AppendChild {
    }
    interface AttributeBasic {
        "customAttr"?: string;
        "multiWord"?: string;
        "single"?: string;
    }
    interface AttributeBasicRoot {
    }
    interface AttributeBoolean {
        "boolState"?: boolean;
        "noreflect"?: boolean;
        "strState"?: string;
    }
    interface AttributeBooleanRoot {
    }
    interface AttributeComplex {
        "bool0"?: boolean;
        "bool1"?: boolean;
        "bool2"?: boolean;
        "nu0"?: number;
        "nu1"?: number;
        "nu2"?: SomeTypes.Number;
        "str0"?: string;
        "str1"?: string;
        "str2"?: SomeTypes.String;
    }
    interface AttributeHost {
    }
    interface AttributeHtmlRoot {
        "anyAttr"?: any;
        "nuAttr"?: number;
        "strAttr"?: string;
    }
    interface BadSharedJsx {
    }
    interface BuildData {
    }
    interface ChildReflectNanAttribute {
        "val"?: number;
    }
    interface ChildWithReflection {
        "val"?: number | any;
    }
    interface CmpLabel {
    }
    interface CmpLabelWithSlotSibling {
    }
    interface ConditionalBasic {
    }
    interface ConditionalRerender {
    }
    interface ConditionalRerenderRoot {
    }
    interface CssCmp {
    }
    interface CssVariablesNoEncapsulation {
    }
    interface CssVariablesShadowDom {
    }
    interface CustomElementChild {
    }
    interface CustomElementChildDifferentNameThanClass {
    }
    interface CustomElementNestedChild {
    }
    interface CustomElementRoot {
    }
    interface CustomElementRootDifferentNameThanClass {
    }
    interface CustomElementsDelegatesFocus {
    }
    interface CustomElementsNoDelegatesFocus {
    }
    interface CustomEventRoot {
    }
    interface DelegatesFocus {
    }
    interface DomReattach {
        "didLoad"?: number;
        "didUnload"?: number;
        "willLoad"?: number;
    }
    interface DomReattachClone {
    }
    interface DomReattachCloneDeepSlot {
    }
    interface DomReattachCloneHost {
    }
    interface DynamicCssVariable {
    }
    interface DynamicImport {
    }
    interface Es5AddclassSvg {
    }
    interface EsmImport {
        "onSomeEvent"?: (event: ComponentEvents.EsmImportCustomEvent<any>) => void;
        "propVal"?: number;
    }
    interface EventBasic {
        "onTestEvent"?: (event: ComponentEvents.EventBasicCustomEvent<any>) => void;
    }
    interface EventCustomType {
        "onTestEvent"?: (event: ComponentEvents.EventCustomTypeCustomEvent<TestEventDetail>) => void;
    }
    interface ExternalImportA {
    }
    interface ExternalImportB {
    }
    interface ExternalImportC {
    }
    interface FactoryJsx {
    }
    interface ImageImport {
    }
    interface InitCssRoot {
    }
    interface InputBasicRoot {
        "value"?: string;
    }
    interface JsonBasic {
    }
    interface KeyReorder {
        "num"?: number;
    }
    interface KeyReorderRoot {
    }
    interface LessCmp {
    }
    interface LifecycleAsyncA {
    }
    interface LifecycleAsyncB {
        "onLifecycleLoad"?: (event: ComponentEvents.LifecycleAsyncBCustomEvent<any>) => void;
        "onLifecycleUpdate"?: (event: ComponentEvents.LifecycleAsyncBCustomEvent<any>) => void;
        "value"?: string;
    }
    interface LifecycleAsyncC {
        "onLifecycleLoad"?: (event: ComponentEvents.LifecycleAsyncCCustomEvent<any>) => void;
        "onLifecycleUpdate"?: (event: ComponentEvents.LifecycleAsyncCCustomEvent<any>) => void;
        "value"?: string;
    }
    interface LifecycleBasicA {
    }
    interface LifecycleBasicB {
        "onLifecycleLoad"?: (event: ComponentEvents.LifecycleBasicBCustomEvent<any>) => void;
        "onLifecycleUpdate"?: (event: ComponentEvents.LifecycleBasicBCustomEvent<any>) => void;
        "value"?: string;
    }
    interface LifecycleBasicC {
        "onLifecycleLoad"?: (event: ComponentEvents.LifecycleBasicCCustomEvent<any>) => void;
        "onLifecycleUpdate"?: (event: ComponentEvents.LifecycleBasicCCustomEvent<any>) => void;
        "value"?: string;
    }
    interface LifecycleNestedA {
    }
    interface LifecycleNestedB {
    }
    interface LifecycleNestedC {
    }
    interface LifecycleUnloadA {
    }
    interface LifecycleUnloadB {
    }
    interface LifecycleUnloadRoot {
    }
    interface LifecycleUpdateA {
    }
    interface LifecycleUpdateB {
        "value"?: number;
    }
    interface LifecycleUpdateC {
        "value"?: number;
    }
    interface ListenJsx {
    }
    interface ListenJsxRoot {
    }
    interface ListenReattach {
    }
    interface ListenWindow {
    }
    interface NoDelegatesFocus {
    }
    interface NodeGlobals {
    }
    interface NodeResolution {
    }
    interface ParentReflectNanAttribute {
    }
    interface ParentWithReflectChild {
    }
    interface ReflectNanAttribute {
        "val"?: number;
    }
    interface ReflectNanAttributeHyphen {
        "valNum"?: number;
    }
    interface ReflectToAttr {
        "bool"?: boolean;
        "disabled"?: boolean;
        "dynamicNu"?: number;
        "dynamicStr"?: string;
        "nu"?: number;
        "null"?: string | null;
        "otherBool"?: boolean;
        "str"?: string;
        "undef"?: string;
    }
    interface ReparentStyleNoVars {
    }
    interface ReparentStyleWithVars {
    }
    interface SassCmp {
    }
    interface ScopedBasic {
    }
    interface ScopedBasicRoot {
    }
    interface ShadowDomArray {
        "values"?: number[];
    }
    interface ShadowDomArrayRoot {
    }
    interface ShadowDomBasic {
    }
    interface ShadowDomBasicRoot {
    }
    interface ShadowDomMode {
        /**
          * The mode determines which platform styles to use.
         */
        "colormode"?: string;
    }
    interface ShadowDomModeRoot {
    }
    interface ShadowDomSlotBasic {
    }
    interface ShadowDomSlotNested {
        "i"?: number;
    }
    interface ShadowDomSlotNestedRoot {
    }
    interface SlotArrayBasic {
    }
    interface SlotArrayComplex {
    }
    interface SlotArrayComplexRoot {
    }
    interface SlotArrayTop {
    }
    interface SlotBasic {
    }
    interface SlotBasicOrder {
    }
    interface SlotBasicOrderRoot {
    }
    interface SlotBasicRoot {
    }
    interface SlotChildrenRoot {
    }
    interface SlotDynamicScopedList {
        "items"?: Array<string>;
    }
    interface SlotDynamicShadowList {
        "items"?: Array<string>;
    }
    interface SlotDynamicWrapper {
        "tag"?: string;
    }
    interface SlotDynamicWrapperRoot {
    }
    interface SlotFallback {
        "inc"?: number;
    }
    interface SlotFallbackRoot {
    }
    interface SlotHtml {
        "inc"?: number;
    }
    interface SlotLightDomContent {
    }
    interface SlotLightDomRoot {
    }
    interface SlotLightList {
    }
    interface SlotLightScopedList {
    }
    interface SlotListLightRoot {
        "items"?: string[];
    }
    interface SlotListLightScopedRoot {
        "items"?: string[];
    }
    interface SlotMapOrder {
    }
    interface SlotMapOrderRoot {
    }
    interface SlotNestedOrderChild {
    }
    interface SlotNestedOrderParent {
    }
    interface SlotNgIf {
    }
    interface SlotNoDefault {
    }
    interface SlotReorder {
        "reordered"?: boolean;
    }
    interface SlotReorderRoot {
    }
    interface SlotReplaceWrapper {
        "href"?: string;
    }
    interface SlotReplaceWrapperRoot {
    }
    interface SlottedCss {
    }
    interface StaticStyles {
    }
    interface StencilSibling {
    }
    interface StylusCmp {
    }
    interface SvgAttr {
    }
    interface SvgClass {
    }
    interface Tag3dComponent {
    }
    interface Tag88 {
    }
    interface IntrinsicElements {
        "append-child": AppendChild;
        "attribute-basic": AttributeBasic;
        "attribute-basic-root": AttributeBasicRoot;
        "attribute-boolean": AttributeBoolean;
        "attribute-boolean-root": AttributeBooleanRoot;
        "attribute-complex": AttributeComplex;
        "attribute-host": AttributeHost;
        "attribute-html-root": AttributeHtmlRoot;
        "bad-shared-jsx": BadSharedJsx;
        "build-data": BuildData;
        "child-reflect-nan-attribute": ChildReflectNanAttribute;
        "child-with-reflection": ChildWithReflection;
        "cmp-label": CmpLabel;
        "cmp-label-with-slot-sibling": CmpLabelWithSlotSibling;
        "conditional-basic": ConditionalBasic;
        "conditional-rerender": ConditionalRerender;
        "conditional-rerender-root": ConditionalRerenderRoot;
        "css-cmp": CssCmp;
        "css-variables-no-encapsulation": CssVariablesNoEncapsulation;
        "css-variables-shadow-dom": CssVariablesShadowDom;
        "custom-element-child": CustomElementChild;
        "custom-element-child-different-name-than-class": CustomElementChildDifferentNameThanClass;
        "custom-element-nested-child": CustomElementNestedChild;
        "custom-element-root": CustomElementRoot;
        "custom-element-root-different-name-than-class": CustomElementRootDifferentNameThanClass;
        "custom-elements-delegates-focus": CustomElementsDelegatesFocus;
        "custom-elements-no-delegates-focus": CustomElementsNoDelegatesFocus;
        "custom-event-root": CustomEventRoot;
        "delegates-focus": DelegatesFocus;
        "dom-reattach": DomReattach;
        "dom-reattach-clone": DomReattachClone;
        "dom-reattach-clone-deep-slot": DomReattachCloneDeepSlot;
        "dom-reattach-clone-host": DomReattachCloneHost;
        "dynamic-css-variable": DynamicCssVariable;
        "dynamic-import": DynamicImport;
        "es5-addclass-svg": Es5AddclassSvg;
        "esm-import": EsmImport;
        "event-basic": EventBasic;
        "event-custom-type": EventCustomType;
        "external-import-a": ExternalImportA;
        "external-import-b": ExternalImportB;
        "external-import-c": ExternalImportC;
        "factory-jsx": FactoryJsx;
        "image-import": ImageImport;
        "init-css-root": InitCssRoot;
        "input-basic-root": InputBasicRoot;
        "json-basic": JsonBasic;
        "key-reorder": KeyReorder;
        "key-reorder-root": KeyReorderRoot;
        "less-cmp": LessCmp;
        "lifecycle-async-a": LifecycleAsyncA;
        "lifecycle-async-b": LifecycleAsyncB;
        "lifecycle-async-c": LifecycleAsyncC;
        "lifecycle-basic-a": LifecycleBasicA;
        "lifecycle-basic-b": LifecycleBasicB;
        "lifecycle-basic-c": LifecycleBasicC;
        "lifecycle-nested-a": LifecycleNestedA;
        "lifecycle-nested-b": LifecycleNestedB;
        "lifecycle-nested-c": LifecycleNestedC;
        "lifecycle-unload-a": LifecycleUnloadA;
        "lifecycle-unload-b": LifecycleUnloadB;
        "lifecycle-unload-root": LifecycleUnloadRoot;
        "lifecycle-update-a": LifecycleUpdateA;
        "lifecycle-update-b": LifecycleUpdateB;
        "lifecycle-update-c": LifecycleUpdateC;
        "listen-jsx": ListenJsx;
        "listen-jsx-root": ListenJsxRoot;
        "listen-reattach": ListenReattach;
        "listen-window": ListenWindow;
        "no-delegates-focus": NoDelegatesFocus;
        "node-globals": NodeGlobals;
        "node-resolution": NodeResolution;
        "parent-reflect-nan-attribute": ParentReflectNanAttribute;
        "parent-with-reflect-child": ParentWithReflectChild;
        "reflect-nan-attribute": ReflectNanAttribute;
        "reflect-nan-attribute-hyphen": ReflectNanAttributeHyphen;
        "reflect-to-attr": ReflectToAttr;
        "reparent-style-no-vars": ReparentStyleNoVars;
        "reparent-style-with-vars": ReparentStyleWithVars;
        "sass-cmp": SassCmp;
        "scoped-basic": ScopedBasic;
        "scoped-basic-root": ScopedBasicRoot;
        "shadow-dom-array": ShadowDomArray;
        "shadow-dom-array-root": ShadowDomArrayRoot;
        "shadow-dom-basic": ShadowDomBasic;
        "shadow-dom-basic-root": ShadowDomBasicRoot;
        "shadow-dom-mode": ShadowDomMode;
        "shadow-dom-mode-root": ShadowDomModeRoot;
        "shadow-dom-slot-basic": ShadowDomSlotBasic;
        "shadow-dom-slot-nested": ShadowDomSlotNested;
        "shadow-dom-slot-nested-root": ShadowDomSlotNestedRoot;
        "slot-array-basic": SlotArrayBasic;
        "slot-array-complex": SlotArrayComplex;
        "slot-array-complex-root": SlotArrayComplexRoot;
        "slot-array-top": SlotArrayTop;
        "slot-basic": SlotBasic;
        "slot-basic-order": SlotBasicOrder;
        "slot-basic-order-root": SlotBasicOrderRoot;
        "slot-basic-root": SlotBasicRoot;
        "slot-children-root": SlotChildrenRoot;
        "slot-dynamic-scoped-list": SlotDynamicScopedList;
        "slot-dynamic-shadow-list": SlotDynamicShadowList;
        "slot-dynamic-wrapper": SlotDynamicWrapper;
        "slot-dynamic-wrapper-root": SlotDynamicWrapperRoot;
        "slot-fallback": SlotFallback;
        "slot-fallback-root": SlotFallbackRoot;
        "slot-html": SlotHtml;
        "slot-light-dom-content": SlotLightDomContent;
        "slot-light-dom-root": SlotLightDomRoot;
        "slot-light-list": SlotLightList;
        "slot-light-scoped-list": SlotLightScopedList;
        "slot-list-light-root": SlotListLightRoot;
        "slot-list-light-scoped-root": SlotListLightScopedRoot;
        "slot-map-order": SlotMapOrder;
        "slot-map-order-root": SlotMapOrderRoot;
        "slot-nested-order-child": SlotNestedOrderChild;
        "slot-nested-order-parent": SlotNestedOrderParent;
        "slot-ng-if": SlotNgIf;
        "slot-no-default": SlotNoDefault;
        "slot-reorder": SlotReorder;
        "slot-reorder-root": SlotReorderRoot;
        "slot-replace-wrapper": SlotReplaceWrapper;
        "slot-replace-wrapper-root": SlotReplaceWrapperRoot;
        "slotted-css": SlottedCss;
        "static-styles": StaticStyles;
        "stencil-sibling": StencilSibling;
        "stylus-cmp": StylusCmp;
        "svg-attr": SvgAttr;
        "svg-class": SvgClass;
        "tag-3d-component": Tag3dComponent;
        "tag-88": Tag88;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "append-child": LocalJSX.AppendChild & JSXBase.HTMLAttributes<HTMLAppendChildElement>;
            "attribute-basic": LocalJSX.AttributeBasic & JSXBase.HTMLAttributes<HTMLAttributeBasicElement>;
            "attribute-basic-root": LocalJSX.AttributeBasicRoot & JSXBase.HTMLAttributes<HTMLAttributeBasicRootElement>;
            "attribute-boolean": LocalJSX.AttributeBoolean & JSXBase.HTMLAttributes<HTMLAttributeBooleanElement>;
            "attribute-boolean-root": LocalJSX.AttributeBooleanRoot & JSXBase.HTMLAttributes<HTMLAttributeBooleanRootElement>;
            "attribute-complex": LocalJSX.AttributeComplex & JSXBase.HTMLAttributes<HTMLAttributeComplexElement>;
            "attribute-host": LocalJSX.AttributeHost & JSXBase.HTMLAttributes<HTMLAttributeHostElement>;
            "attribute-html-root": LocalJSX.AttributeHtmlRoot & JSXBase.HTMLAttributes<HTMLAttributeHtmlRootElement>;
            "bad-shared-jsx": LocalJSX.BadSharedJsx & JSXBase.HTMLAttributes<HTMLBadSharedJsxElement>;
            "build-data": LocalJSX.BuildData & JSXBase.HTMLAttributes<HTMLBuildDataElement>;
            "child-reflect-nan-attribute": LocalJSX.ChildReflectNanAttribute & JSXBase.HTMLAttributes<HTMLChildReflectNanAttributeElement>;
            "child-with-reflection": LocalJSX.ChildWithReflection & JSXBase.HTMLAttributes<HTMLChildWithReflectionElement>;
            "cmp-label": LocalJSX.CmpLabel & JSXBase.HTMLAttributes<HTMLCmpLabelElement>;
            "cmp-label-with-slot-sibling": LocalJSX.CmpLabelWithSlotSibling & JSXBase.HTMLAttributes<HTMLCmpLabelWithSlotSiblingElement>;
            "conditional-basic": LocalJSX.ConditionalBasic & JSXBase.HTMLAttributes<HTMLConditionalBasicElement>;
            "conditional-rerender": LocalJSX.ConditionalRerender & JSXBase.HTMLAttributes<HTMLConditionalRerenderElement>;
            "conditional-rerender-root": LocalJSX.ConditionalRerenderRoot & JSXBase.HTMLAttributes<HTMLConditionalRerenderRootElement>;
            "css-cmp": LocalJSX.CssCmp & JSXBase.HTMLAttributes<HTMLCssCmpElement>;
            "css-variables-no-encapsulation": LocalJSX.CssVariablesNoEncapsulation & JSXBase.HTMLAttributes<HTMLCssVariablesNoEncapsulationElement>;
            "css-variables-shadow-dom": LocalJSX.CssVariablesShadowDom & JSXBase.HTMLAttributes<HTMLCssVariablesShadowDomElement>;
            "custom-element-child": LocalJSX.CustomElementChild & JSXBase.HTMLAttributes<HTMLCustomElementChildElement>;
            "custom-element-child-different-name-than-class": LocalJSX.CustomElementChildDifferentNameThanClass & JSXBase.HTMLAttributes<HTMLCustomElementChildDifferentNameThanClassElement>;
            "custom-element-nested-child": LocalJSX.CustomElementNestedChild & JSXBase.HTMLAttributes<HTMLCustomElementNestedChildElement>;
            "custom-element-root": LocalJSX.CustomElementRoot & JSXBase.HTMLAttributes<HTMLCustomElementRootElement>;
            "custom-element-root-different-name-than-class": LocalJSX.CustomElementRootDifferentNameThanClass & JSXBase.HTMLAttributes<HTMLCustomElementRootDifferentNameThanClassElement>;
            "custom-elements-delegates-focus": LocalJSX.CustomElementsDelegatesFocus & JSXBase.HTMLAttributes<HTMLCustomElementsDelegatesFocusElement>;
            "custom-elements-no-delegates-focus": LocalJSX.CustomElementsNoDelegatesFocus & JSXBase.HTMLAttributes<HTMLCustomElementsNoDelegatesFocusElement>;
            "custom-event-root": LocalJSX.CustomEventRoot & JSXBase.HTMLAttributes<HTMLCustomEventRootElement>;
            "delegates-focus": LocalJSX.DelegatesFocus & JSXBase.HTMLAttributes<HTMLDelegatesFocusElement>;
            "dom-reattach": LocalJSX.DomReattach & JSXBase.HTMLAttributes<HTMLDomReattachElement>;
            "dom-reattach-clone": LocalJSX.DomReattachClone & JSXBase.HTMLAttributes<HTMLDomReattachCloneElement>;
            "dom-reattach-clone-deep-slot": LocalJSX.DomReattachCloneDeepSlot & JSXBase.HTMLAttributes<HTMLDomReattachCloneDeepSlotElement>;
            "dom-reattach-clone-host": LocalJSX.DomReattachCloneHost & JSXBase.HTMLAttributes<HTMLDomReattachCloneHostElement>;
            "dynamic-css-variable": LocalJSX.DynamicCssVariable & JSXBase.HTMLAttributes<HTMLDynamicCssVariableElement>;
            "dynamic-import": LocalJSX.DynamicImport & JSXBase.HTMLAttributes<HTMLDynamicImportElement>;
            "es5-addclass-svg": LocalJSX.Es5AddclassSvg & JSXBase.HTMLAttributes<HTMLEs5AddclassSvgElement>;
            "esm-import": LocalJSX.EsmImport & JSXBase.HTMLAttributes<HTMLEsmImportElement>;
            "event-basic": LocalJSX.EventBasic & JSXBase.HTMLAttributes<HTMLEventBasicElement>;
            "event-custom-type": LocalJSX.EventCustomType & JSXBase.HTMLAttributes<HTMLEventCustomTypeElement>;
            "external-import-a": LocalJSX.ExternalImportA & JSXBase.HTMLAttributes<HTMLExternalImportAElement>;
            "external-import-b": LocalJSX.ExternalImportB & JSXBase.HTMLAttributes<HTMLExternalImportBElement>;
            "external-import-c": LocalJSX.ExternalImportC & JSXBase.HTMLAttributes<HTMLExternalImportCElement>;
            "factory-jsx": LocalJSX.FactoryJsx & JSXBase.HTMLAttributes<HTMLFactoryJsxElement>;
            "image-import": LocalJSX.ImageImport & JSXBase.HTMLAttributes<HTMLImageImportElement>;
            "init-css-root": LocalJSX.InitCssRoot & JSXBase.HTMLAttributes<HTMLInitCssRootElement>;
            "input-basic-root": LocalJSX.InputBasicRoot & JSXBase.HTMLAttributes<HTMLInputBasicRootElement>;
            "json-basic": LocalJSX.JsonBasic & JSXBase.HTMLAttributes<HTMLJsonBasicElement>;
            "key-reorder": LocalJSX.KeyReorder & JSXBase.HTMLAttributes<HTMLKeyReorderElement>;
            "key-reorder-root": LocalJSX.KeyReorderRoot & JSXBase.HTMLAttributes<HTMLKeyReorderRootElement>;
            "less-cmp": LocalJSX.LessCmp & JSXBase.HTMLAttributes<HTMLLessCmpElement>;
            "lifecycle-async-a": LocalJSX.LifecycleAsyncA & JSXBase.HTMLAttributes<HTMLLifecycleAsyncAElement>;
            "lifecycle-async-b": LocalJSX.LifecycleAsyncB & JSXBase.HTMLAttributes<HTMLLifecycleAsyncBElement>;
            "lifecycle-async-c": LocalJSX.LifecycleAsyncC & JSXBase.HTMLAttributes<HTMLLifecycleAsyncCElement>;
            "lifecycle-basic-a": LocalJSX.LifecycleBasicA & JSXBase.HTMLAttributes<HTMLLifecycleBasicAElement>;
            "lifecycle-basic-b": LocalJSX.LifecycleBasicB & JSXBase.HTMLAttributes<HTMLLifecycleBasicBElement>;
            "lifecycle-basic-c": LocalJSX.LifecycleBasicC & JSXBase.HTMLAttributes<HTMLLifecycleBasicCElement>;
            "lifecycle-nested-a": LocalJSX.LifecycleNestedA & JSXBase.HTMLAttributes<HTMLLifecycleNestedAElement>;
            "lifecycle-nested-b": LocalJSX.LifecycleNestedB & JSXBase.HTMLAttributes<HTMLLifecycleNestedBElement>;
            "lifecycle-nested-c": LocalJSX.LifecycleNestedC & JSXBase.HTMLAttributes<HTMLLifecycleNestedCElement>;
            "lifecycle-unload-a": LocalJSX.LifecycleUnloadA & JSXBase.HTMLAttributes<HTMLLifecycleUnloadAElement>;
            "lifecycle-unload-b": LocalJSX.LifecycleUnloadB & JSXBase.HTMLAttributes<HTMLLifecycleUnloadBElement>;
            "lifecycle-unload-root": LocalJSX.LifecycleUnloadRoot & JSXBase.HTMLAttributes<HTMLLifecycleUnloadRootElement>;
            "lifecycle-update-a": LocalJSX.LifecycleUpdateA & JSXBase.HTMLAttributes<HTMLLifecycleUpdateAElement>;
            "lifecycle-update-b": LocalJSX.LifecycleUpdateB & JSXBase.HTMLAttributes<HTMLLifecycleUpdateBElement>;
            "lifecycle-update-c": LocalJSX.LifecycleUpdateC & JSXBase.HTMLAttributes<HTMLLifecycleUpdateCElement>;
            "listen-jsx": LocalJSX.ListenJsx & JSXBase.HTMLAttributes<HTMLListenJsxElement>;
            "listen-jsx-root": LocalJSX.ListenJsxRoot & JSXBase.HTMLAttributes<HTMLListenJsxRootElement>;
            "listen-reattach": LocalJSX.ListenReattach & JSXBase.HTMLAttributes<HTMLListenReattachElement>;
            "listen-window": LocalJSX.ListenWindow & JSXBase.HTMLAttributes<HTMLListenWindowElement>;
            "no-delegates-focus": LocalJSX.NoDelegatesFocus & JSXBase.HTMLAttributes<HTMLNoDelegatesFocusElement>;
            "node-globals": LocalJSX.NodeGlobals & JSXBase.HTMLAttributes<HTMLNodeGlobalsElement>;
            "node-resolution": LocalJSX.NodeResolution & JSXBase.HTMLAttributes<HTMLNodeResolutionElement>;
            "parent-reflect-nan-attribute": LocalJSX.ParentReflectNanAttribute & JSXBase.HTMLAttributes<HTMLParentReflectNanAttributeElement>;
            "parent-with-reflect-child": LocalJSX.ParentWithReflectChild & JSXBase.HTMLAttributes<HTMLParentWithReflectChildElement>;
            "reflect-nan-attribute": LocalJSX.ReflectNanAttribute & JSXBase.HTMLAttributes<HTMLReflectNanAttributeElement>;
            "reflect-nan-attribute-hyphen": LocalJSX.ReflectNanAttributeHyphen & JSXBase.HTMLAttributes<HTMLReflectNanAttributeHyphenElement>;
            "reflect-to-attr": LocalJSX.ReflectToAttr & JSXBase.HTMLAttributes<HTMLReflectToAttrElement>;
            "reparent-style-no-vars": LocalJSX.ReparentStyleNoVars & JSXBase.HTMLAttributes<HTMLReparentStyleNoVarsElement>;
            "reparent-style-with-vars": LocalJSX.ReparentStyleWithVars & JSXBase.HTMLAttributes<HTMLReparentStyleWithVarsElement>;
            "sass-cmp": LocalJSX.SassCmp & JSXBase.HTMLAttributes<HTMLSassCmpElement>;
            "scoped-basic": LocalJSX.ScopedBasic & JSXBase.HTMLAttributes<HTMLScopedBasicElement>;
            "scoped-basic-root": LocalJSX.ScopedBasicRoot & JSXBase.HTMLAttributes<HTMLScopedBasicRootElement>;
            "shadow-dom-array": LocalJSX.ShadowDomArray & JSXBase.HTMLAttributes<HTMLShadowDomArrayElement>;
            "shadow-dom-array-root": LocalJSX.ShadowDomArrayRoot & JSXBase.HTMLAttributes<HTMLShadowDomArrayRootElement>;
            "shadow-dom-basic": LocalJSX.ShadowDomBasic & JSXBase.HTMLAttributes<HTMLShadowDomBasicElement>;
            "shadow-dom-basic-root": LocalJSX.ShadowDomBasicRoot & JSXBase.HTMLAttributes<HTMLShadowDomBasicRootElement>;
            "shadow-dom-mode": LocalJSX.ShadowDomMode & JSXBase.HTMLAttributes<HTMLShadowDomModeElement>;
            "shadow-dom-mode-root": LocalJSX.ShadowDomModeRoot & JSXBase.HTMLAttributes<HTMLShadowDomModeRootElement>;
            "shadow-dom-slot-basic": LocalJSX.ShadowDomSlotBasic & JSXBase.HTMLAttributes<HTMLShadowDomSlotBasicElement>;
            "shadow-dom-slot-nested": LocalJSX.ShadowDomSlotNested & JSXBase.HTMLAttributes<HTMLShadowDomSlotNestedElement>;
            "shadow-dom-slot-nested-root": LocalJSX.ShadowDomSlotNestedRoot & JSXBase.HTMLAttributes<HTMLShadowDomSlotNestedRootElement>;
            "slot-array-basic": LocalJSX.SlotArrayBasic & JSXBase.HTMLAttributes<HTMLSlotArrayBasicElement>;
            "slot-array-complex": LocalJSX.SlotArrayComplex & JSXBase.HTMLAttributes<HTMLSlotArrayComplexElement>;
            "slot-array-complex-root": LocalJSX.SlotArrayComplexRoot & JSXBase.HTMLAttributes<HTMLSlotArrayComplexRootElement>;
            "slot-array-top": LocalJSX.SlotArrayTop & JSXBase.HTMLAttributes<HTMLSlotArrayTopElement>;
            "slot-basic": LocalJSX.SlotBasic & JSXBase.HTMLAttributes<HTMLSlotBasicElement>;
            "slot-basic-order": LocalJSX.SlotBasicOrder & JSXBase.HTMLAttributes<HTMLSlotBasicOrderElement>;
            "slot-basic-order-root": LocalJSX.SlotBasicOrderRoot & JSXBase.HTMLAttributes<HTMLSlotBasicOrderRootElement>;
            "slot-basic-root": LocalJSX.SlotBasicRoot & JSXBase.HTMLAttributes<HTMLSlotBasicRootElement>;
            "slot-children-root": LocalJSX.SlotChildrenRoot & JSXBase.HTMLAttributes<HTMLSlotChildrenRootElement>;
            "slot-dynamic-scoped-list": LocalJSX.SlotDynamicScopedList & JSXBase.HTMLAttributes<HTMLSlotDynamicScopedListElement>;
            "slot-dynamic-shadow-list": LocalJSX.SlotDynamicShadowList & JSXBase.HTMLAttributes<HTMLSlotDynamicShadowListElement>;
            "slot-dynamic-wrapper": LocalJSX.SlotDynamicWrapper & JSXBase.HTMLAttributes<HTMLSlotDynamicWrapperElement>;
            "slot-dynamic-wrapper-root": LocalJSX.SlotDynamicWrapperRoot & JSXBase.HTMLAttributes<HTMLSlotDynamicWrapperRootElement>;
            "slot-fallback": LocalJSX.SlotFallback & JSXBase.HTMLAttributes<HTMLSlotFallbackElement>;
            "slot-fallback-root": LocalJSX.SlotFallbackRoot & JSXBase.HTMLAttributes<HTMLSlotFallbackRootElement>;
            "slot-html": LocalJSX.SlotHtml & JSXBase.HTMLAttributes<HTMLSlotHtmlElement>;
            "slot-light-dom-content": LocalJSX.SlotLightDomContent & JSXBase.HTMLAttributes<HTMLSlotLightDomContentElement>;
            "slot-light-dom-root": LocalJSX.SlotLightDomRoot & JSXBase.HTMLAttributes<HTMLSlotLightDomRootElement>;
            "slot-light-list": LocalJSX.SlotLightList & JSXBase.HTMLAttributes<HTMLSlotLightListElement>;
            "slot-light-scoped-list": LocalJSX.SlotLightScopedList & JSXBase.HTMLAttributes<HTMLSlotLightScopedListElement>;
            "slot-list-light-root": LocalJSX.SlotListLightRoot & JSXBase.HTMLAttributes<HTMLSlotListLightRootElement>;
            "slot-list-light-scoped-root": LocalJSX.SlotListLightScopedRoot & JSXBase.HTMLAttributes<HTMLSlotListLightScopedRootElement>;
            "slot-map-order": LocalJSX.SlotMapOrder & JSXBase.HTMLAttributes<HTMLSlotMapOrderElement>;
            "slot-map-order-root": LocalJSX.SlotMapOrderRoot & JSXBase.HTMLAttributes<HTMLSlotMapOrderRootElement>;
            "slot-nested-order-child": LocalJSX.SlotNestedOrderChild & JSXBase.HTMLAttributes<HTMLSlotNestedOrderChildElement>;
            "slot-nested-order-parent": LocalJSX.SlotNestedOrderParent & JSXBase.HTMLAttributes<HTMLSlotNestedOrderParentElement>;
            "slot-ng-if": LocalJSX.SlotNgIf & JSXBase.HTMLAttributes<HTMLSlotNgIfElement>;
            "slot-no-default": LocalJSX.SlotNoDefault & JSXBase.HTMLAttributes<HTMLSlotNoDefaultElement>;
            "slot-reorder": LocalJSX.SlotReorder & JSXBase.HTMLAttributes<HTMLSlotReorderElement>;
            "slot-reorder-root": LocalJSX.SlotReorderRoot & JSXBase.HTMLAttributes<HTMLSlotReorderRootElement>;
            "slot-replace-wrapper": LocalJSX.SlotReplaceWrapper & JSXBase.HTMLAttributes<HTMLSlotReplaceWrapperElement>;
            "slot-replace-wrapper-root": LocalJSX.SlotReplaceWrapperRoot & JSXBase.HTMLAttributes<HTMLSlotReplaceWrapperRootElement>;
            "slotted-css": LocalJSX.SlottedCss & JSXBase.HTMLAttributes<HTMLSlottedCssElement>;
            "static-styles": LocalJSX.StaticStyles & JSXBase.HTMLAttributes<HTMLStaticStylesElement>;
            "stencil-sibling": LocalJSX.StencilSibling & JSXBase.HTMLAttributes<HTMLStencilSiblingElement>;
            "stylus-cmp": LocalJSX.StylusCmp & JSXBase.HTMLAttributes<HTMLStylusCmpElement>;
            "svg-attr": LocalJSX.SvgAttr & JSXBase.HTMLAttributes<HTMLSvgAttrElement>;
            "svg-class": LocalJSX.SvgClass & JSXBase.HTMLAttributes<HTMLSvgClassElement>;
            "tag-3d-component": LocalJSX.Tag3dComponent & JSXBase.HTMLAttributes<HTMLTag3dComponentElement>;
            "tag-88": LocalJSX.Tag88 & JSXBase.HTMLAttributes<HTMLTag88Element>;
        }
    }
}
