/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  SomeTypes,
} from './util';

export namespace Components {
  interface AttributeBasic {
    'customAttr': string;
    'multiWord': string;
    'single': string;
  }
  interface AttributeBasicRoot {}
  interface AttributeBoolean {
    'boolState'?: boolean;
    'noreflect'?: boolean;
    'strState'?: string;
  }
  interface AttributeBooleanRoot {
    'toggleState': () => Promise<void>;
  }
  interface AttributeComplex {
    'bool0': boolean;
    'bool1'?: boolean;
    'bool2'?: boolean;
    'getInstance': () => Promise<this>;
    'nu0': number;
    'nu1'?: number;
    'nu2'?: SomeTypes.Number;
    'str0': string;
    'str1'?: string;
    'str2'?: SomeTypes.String;
  }
  interface AttributeHost {}
  interface AttributeHtmlRoot {
    'anyAttr'?: any;
    'nuAttr'?: number;
    'strAttr'?: string;
  }
  interface BadSharedJsx {}
  interface ConditionalBasic {}
  interface ConditionalRerender {}
  interface ConditionalRerenderRoot {}
  interface CssCmp {}
  interface CssVariablesNoEncapsulation {}
  interface CssVariablesShadowDom {}
  interface CustomEventRoot {}
  interface DomReattach {
    'didLoad': number;
    'didUnload': number;
    'willLoad': number;
  }
  interface DynamicCssVariable {}
  interface DynamicImport {
    'update': () => Promise<void>;
  }
  interface Es5AddclassSvg {}
  interface EsmImport {
    'propVal': number;
    'someMethod': () => Promise<void>;
  }
  interface ExternalImportA {}
  interface ExternalImportB {}
  interface ExternalImportC {}
  interface FactoryJsx {}
  interface IePolyfills {}
  interface ImageImport {}
  interface InitCssRoot {}
  interface InputBasicRoot {
    'value'?: string;
  }
  interface JsonBasic {}
  interface KeyReorder {
    'num'?: number;
  }
  interface KeyReorderRoot {}
  interface LegacyContext {
    'getData': () => Promise<{ win: Window; doc: Document; hasQueue: boolean; isServer: boolean; unknown: any; myService: any; }>;
  }
  interface LessCmp {}
  interface LifecycleAsyncA {}
  interface LifecycleAsyncB {
    'value': string;
  }
  interface LifecycleAsyncC {
    'value': string;
  }
  interface LifecycleBasicA {}
  interface LifecycleBasicB {
    'value': string;
  }
  interface LifecycleBasicC {
    'value': string;
  }
  interface LifecycleUnloadA {}
  interface LifecycleUnloadB {}
  interface LifecycleUnloadRoot {}
  interface LifecycleUpdateA {}
  interface LifecycleUpdateB {
    'value': number;
  }
  interface LifecycleUpdateC {
    'value': number;
  }
  interface ListenJsx {}
  interface ListenJsxRoot {}
  interface ListenWindow {}
  interface NodeGlobals {}
  interface NodeResolution {}
  interface ReflectToAttr {
    'bool': boolean;
    'disabled': boolean;
    'dynamicNu'?: number;
    'dynamicStr'?: string;
    'nu': number;
    'null': string | null;
    'otherBool': boolean;
    'str': string;
    'undef'?: string;
  }
  interface ReparentStyleNoVars {}
  interface ReparentStyleWithVars {}
  interface SassCmp {}
  interface ScopedBasic {}
  interface ScopedBasicRoot {}
  interface ShadowDomArray {
    'values': number[];
  }
  interface ShadowDomArrayRoot {}
  interface ShadowDomBasic {}
  interface ShadowDomBasicRoot {}
  interface ShadowDomMode {
    /**
    * The mode determines which platform styles to use.
    */
    'colormode'?: string;
  }
  interface ShadowDomModeRoot {}
  interface ShadowDomSlotBasic {}
  interface ShadowDomSlotNested {
    'i'?: number;
  }
  interface ShadowDomSlotNestedRoot {}
  interface SlotArrayBasic {}
  interface SlotArrayComplex {}
  interface SlotArrayComplexRoot {}
  interface SlotArrayTop {}
  interface SlotBasic {}
  interface SlotBasicOrder {}
  interface SlotBasicOrderRoot {}
  interface SlotBasicRoot {}
  interface SlotDynamicWrapper {
    'tag': string;
  }
  interface SlotDynamicWrapperRoot {}
  interface SlotFallback {
    'inc': number;
  }
  interface SlotFallbackRoot {}
  interface SlotHtml {
    'inc': number;
  }
  interface SlotLightDomContent {}
  interface SlotLightDomRoot {}
  interface SlotMapOrder {}
  interface SlotMapOrderRoot {}
  interface SlotReorder {
    'reordered': boolean;
  }
  interface SlotReorderRoot {}
  interface SlotReplaceWrapper {
    'href'?: string;
  }
  interface SlotReplaceWrapperRoot {}
  interface StylusCmp {}
  interface SvgAttr {}
  interface SvgClass {}
  interface Tag3dComponent {}
  interface Tag88 {}
}

declare global {


  interface HTMLAttributeBasicElement extends Components.AttributeBasic, HTMLStencilElement {}
  var HTMLAttributeBasicElement: {
    prototype: HTMLAttributeBasicElement;
    new (): HTMLAttributeBasicElement;
  };

  interface HTMLAttributeBasicRootElement extends Components.AttributeBasicRoot, HTMLStencilElement {}
  var HTMLAttributeBasicRootElement: {
    prototype: HTMLAttributeBasicRootElement;
    new (): HTMLAttributeBasicRootElement;
  };

  interface HTMLAttributeBooleanElement extends Components.AttributeBoolean, HTMLStencilElement {}
  var HTMLAttributeBooleanElement: {
    prototype: HTMLAttributeBooleanElement;
    new (): HTMLAttributeBooleanElement;
  };

  interface HTMLAttributeBooleanRootElement extends Components.AttributeBooleanRoot, HTMLStencilElement {}
  var HTMLAttributeBooleanRootElement: {
    prototype: HTMLAttributeBooleanRootElement;
    new (): HTMLAttributeBooleanRootElement;
  };

  interface HTMLAttributeComplexElement extends Components.AttributeComplex, HTMLStencilElement {}
  var HTMLAttributeComplexElement: {
    prototype: HTMLAttributeComplexElement;
    new (): HTMLAttributeComplexElement;
  };

  interface HTMLAttributeHostElement extends Components.AttributeHost, HTMLStencilElement {}
  var HTMLAttributeHostElement: {
    prototype: HTMLAttributeHostElement;
    new (): HTMLAttributeHostElement;
  };

  interface HTMLAttributeHtmlRootElement extends Components.AttributeHtmlRoot, HTMLStencilElement {}
  var HTMLAttributeHtmlRootElement: {
    prototype: HTMLAttributeHtmlRootElement;
    new (): HTMLAttributeHtmlRootElement;
  };

  interface HTMLBadSharedJsxElement extends Components.BadSharedJsx, HTMLStencilElement {}
  var HTMLBadSharedJsxElement: {
    prototype: HTMLBadSharedJsxElement;
    new (): HTMLBadSharedJsxElement;
  };

  interface HTMLConditionalBasicElement extends Components.ConditionalBasic, HTMLStencilElement {}
  var HTMLConditionalBasicElement: {
    prototype: HTMLConditionalBasicElement;
    new (): HTMLConditionalBasicElement;
  };

  interface HTMLConditionalRerenderElement extends Components.ConditionalRerender, HTMLStencilElement {}
  var HTMLConditionalRerenderElement: {
    prototype: HTMLConditionalRerenderElement;
    new (): HTMLConditionalRerenderElement;
  };

  interface HTMLConditionalRerenderRootElement extends Components.ConditionalRerenderRoot, HTMLStencilElement {}
  var HTMLConditionalRerenderRootElement: {
    prototype: HTMLConditionalRerenderRootElement;
    new (): HTMLConditionalRerenderRootElement;
  };

  interface HTMLCssCmpElement extends Components.CssCmp, HTMLStencilElement {}
  var HTMLCssCmpElement: {
    prototype: HTMLCssCmpElement;
    new (): HTMLCssCmpElement;
  };

  interface HTMLCssVariablesNoEncapsulationElement extends Components.CssVariablesNoEncapsulation, HTMLStencilElement {}
  var HTMLCssVariablesNoEncapsulationElement: {
    prototype: HTMLCssVariablesNoEncapsulationElement;
    new (): HTMLCssVariablesNoEncapsulationElement;
  };

  interface HTMLCssVariablesShadowDomElement extends Components.CssVariablesShadowDom, HTMLStencilElement {}
  var HTMLCssVariablesShadowDomElement: {
    prototype: HTMLCssVariablesShadowDomElement;
    new (): HTMLCssVariablesShadowDomElement;
  };

  interface HTMLCustomEventRootElement extends Components.CustomEventRoot, HTMLStencilElement {}
  var HTMLCustomEventRootElement: {
    prototype: HTMLCustomEventRootElement;
    new (): HTMLCustomEventRootElement;
  };

  interface HTMLDomReattachElement extends Components.DomReattach, HTMLStencilElement {}
  var HTMLDomReattachElement: {
    prototype: HTMLDomReattachElement;
    new (): HTMLDomReattachElement;
  };

  interface HTMLDynamicCssVariableElement extends Components.DynamicCssVariable, HTMLStencilElement {}
  var HTMLDynamicCssVariableElement: {
    prototype: HTMLDynamicCssVariableElement;
    new (): HTMLDynamicCssVariableElement;
  };

  interface HTMLDynamicImportElement extends Components.DynamicImport, HTMLStencilElement {}
  var HTMLDynamicImportElement: {
    prototype: HTMLDynamicImportElement;
    new (): HTMLDynamicImportElement;
  };

  interface HTMLEs5AddclassSvgElement extends Components.Es5AddclassSvg, HTMLStencilElement {}
  var HTMLEs5AddclassSvgElement: {
    prototype: HTMLEs5AddclassSvgElement;
    new (): HTMLEs5AddclassSvgElement;
  };

  interface HTMLEsmImportElement extends Components.EsmImport, HTMLStencilElement {}
  var HTMLEsmImportElement: {
    prototype: HTMLEsmImportElement;
    new (): HTMLEsmImportElement;
  };

  interface HTMLExternalImportAElement extends Components.ExternalImportA, HTMLStencilElement {}
  var HTMLExternalImportAElement: {
    prototype: HTMLExternalImportAElement;
    new (): HTMLExternalImportAElement;
  };

  interface HTMLExternalImportBElement extends Components.ExternalImportB, HTMLStencilElement {}
  var HTMLExternalImportBElement: {
    prototype: HTMLExternalImportBElement;
    new (): HTMLExternalImportBElement;
  };

  interface HTMLExternalImportCElement extends Components.ExternalImportC, HTMLStencilElement {}
  var HTMLExternalImportCElement: {
    prototype: HTMLExternalImportCElement;
    new (): HTMLExternalImportCElement;
  };

  interface HTMLFactoryJsxElement extends Components.FactoryJsx, HTMLStencilElement {}
  var HTMLFactoryJsxElement: {
    prototype: HTMLFactoryJsxElement;
    new (): HTMLFactoryJsxElement;
  };

  interface HTMLIePolyfillsElement extends Components.IePolyfills, HTMLStencilElement {}
  var HTMLIePolyfillsElement: {
    prototype: HTMLIePolyfillsElement;
    new (): HTMLIePolyfillsElement;
  };

  interface HTMLImageImportElement extends Components.ImageImport, HTMLStencilElement {}
  var HTMLImageImportElement: {
    prototype: HTMLImageImportElement;
    new (): HTMLImageImportElement;
  };

  interface HTMLInitCssRootElement extends Components.InitCssRoot, HTMLStencilElement {}
  var HTMLInitCssRootElement: {
    prototype: HTMLInitCssRootElement;
    new (): HTMLInitCssRootElement;
  };

  interface HTMLInputBasicRootElement extends Components.InputBasicRoot, HTMLStencilElement {}
  var HTMLInputBasicRootElement: {
    prototype: HTMLInputBasicRootElement;
    new (): HTMLInputBasicRootElement;
  };

  interface HTMLJsonBasicElement extends Components.JsonBasic, HTMLStencilElement {}
  var HTMLJsonBasicElement: {
    prototype: HTMLJsonBasicElement;
    new (): HTMLJsonBasicElement;
  };

  interface HTMLKeyReorderElement extends Components.KeyReorder, HTMLStencilElement {}
  var HTMLKeyReorderElement: {
    prototype: HTMLKeyReorderElement;
    new (): HTMLKeyReorderElement;
  };

  interface HTMLKeyReorderRootElement extends Components.KeyReorderRoot, HTMLStencilElement {}
  var HTMLKeyReorderRootElement: {
    prototype: HTMLKeyReorderRootElement;
    new (): HTMLKeyReorderRootElement;
  };

  interface HTMLLegacyContextElement extends Components.LegacyContext, HTMLStencilElement {}
  var HTMLLegacyContextElement: {
    prototype: HTMLLegacyContextElement;
    new (): HTMLLegacyContextElement;
  };

  interface HTMLLessCmpElement extends Components.LessCmp, HTMLStencilElement {}
  var HTMLLessCmpElement: {
    prototype: HTMLLessCmpElement;
    new (): HTMLLessCmpElement;
  };

  interface HTMLLifecycleAsyncAElement extends Components.LifecycleAsyncA, HTMLStencilElement {}
  var HTMLLifecycleAsyncAElement: {
    prototype: HTMLLifecycleAsyncAElement;
    new (): HTMLLifecycleAsyncAElement;
  };

  interface HTMLLifecycleAsyncBElement extends Components.LifecycleAsyncB, HTMLStencilElement {}
  var HTMLLifecycleAsyncBElement: {
    prototype: HTMLLifecycleAsyncBElement;
    new (): HTMLLifecycleAsyncBElement;
  };

  interface HTMLLifecycleAsyncCElement extends Components.LifecycleAsyncC, HTMLStencilElement {}
  var HTMLLifecycleAsyncCElement: {
    prototype: HTMLLifecycleAsyncCElement;
    new (): HTMLLifecycleAsyncCElement;
  };

  interface HTMLLifecycleBasicAElement extends Components.LifecycleBasicA, HTMLStencilElement {}
  var HTMLLifecycleBasicAElement: {
    prototype: HTMLLifecycleBasicAElement;
    new (): HTMLLifecycleBasicAElement;
  };

  interface HTMLLifecycleBasicBElement extends Components.LifecycleBasicB, HTMLStencilElement {}
  var HTMLLifecycleBasicBElement: {
    prototype: HTMLLifecycleBasicBElement;
    new (): HTMLLifecycleBasicBElement;
  };

  interface HTMLLifecycleBasicCElement extends Components.LifecycleBasicC, HTMLStencilElement {}
  var HTMLLifecycleBasicCElement: {
    prototype: HTMLLifecycleBasicCElement;
    new (): HTMLLifecycleBasicCElement;
  };

  interface HTMLLifecycleUnloadAElement extends Components.LifecycleUnloadA, HTMLStencilElement {}
  var HTMLLifecycleUnloadAElement: {
    prototype: HTMLLifecycleUnloadAElement;
    new (): HTMLLifecycleUnloadAElement;
  };

  interface HTMLLifecycleUnloadBElement extends Components.LifecycleUnloadB, HTMLStencilElement {}
  var HTMLLifecycleUnloadBElement: {
    prototype: HTMLLifecycleUnloadBElement;
    new (): HTMLLifecycleUnloadBElement;
  };

  interface HTMLLifecycleUnloadRootElement extends Components.LifecycleUnloadRoot, HTMLStencilElement {}
  var HTMLLifecycleUnloadRootElement: {
    prototype: HTMLLifecycleUnloadRootElement;
    new (): HTMLLifecycleUnloadRootElement;
  };

  interface HTMLLifecycleUpdateAElement extends Components.LifecycleUpdateA, HTMLStencilElement {}
  var HTMLLifecycleUpdateAElement: {
    prototype: HTMLLifecycleUpdateAElement;
    new (): HTMLLifecycleUpdateAElement;
  };

  interface HTMLLifecycleUpdateBElement extends Components.LifecycleUpdateB, HTMLStencilElement {}
  var HTMLLifecycleUpdateBElement: {
    prototype: HTMLLifecycleUpdateBElement;
    new (): HTMLLifecycleUpdateBElement;
  };

  interface HTMLLifecycleUpdateCElement extends Components.LifecycleUpdateC, HTMLStencilElement {}
  var HTMLLifecycleUpdateCElement: {
    prototype: HTMLLifecycleUpdateCElement;
    new (): HTMLLifecycleUpdateCElement;
  };

  interface HTMLListenJsxElement extends Components.ListenJsx, HTMLStencilElement {}
  var HTMLListenJsxElement: {
    prototype: HTMLListenJsxElement;
    new (): HTMLListenJsxElement;
  };

  interface HTMLListenJsxRootElement extends Components.ListenJsxRoot, HTMLStencilElement {}
  var HTMLListenJsxRootElement: {
    prototype: HTMLListenJsxRootElement;
    new (): HTMLListenJsxRootElement;
  };

  interface HTMLListenWindowElement extends Components.ListenWindow, HTMLStencilElement {}
  var HTMLListenWindowElement: {
    prototype: HTMLListenWindowElement;
    new (): HTMLListenWindowElement;
  };

  interface HTMLNodeGlobalsElement extends Components.NodeGlobals, HTMLStencilElement {}
  var HTMLNodeGlobalsElement: {
    prototype: HTMLNodeGlobalsElement;
    new (): HTMLNodeGlobalsElement;
  };

  interface HTMLNodeResolutionElement extends Components.NodeResolution, HTMLStencilElement {}
  var HTMLNodeResolutionElement: {
    prototype: HTMLNodeResolutionElement;
    new (): HTMLNodeResolutionElement;
  };

  interface HTMLReflectToAttrElement extends Components.ReflectToAttr, HTMLStencilElement {}
  var HTMLReflectToAttrElement: {
    prototype: HTMLReflectToAttrElement;
    new (): HTMLReflectToAttrElement;
  };

  interface HTMLReparentStyleNoVarsElement extends Components.ReparentStyleNoVars, HTMLStencilElement {}
  var HTMLReparentStyleNoVarsElement: {
    prototype: HTMLReparentStyleNoVarsElement;
    new (): HTMLReparentStyleNoVarsElement;
  };

  interface HTMLReparentStyleWithVarsElement extends Components.ReparentStyleWithVars, HTMLStencilElement {}
  var HTMLReparentStyleWithVarsElement: {
    prototype: HTMLReparentStyleWithVarsElement;
    new (): HTMLReparentStyleWithVarsElement;
  };

  interface HTMLSassCmpElement extends Components.SassCmp, HTMLStencilElement {}
  var HTMLSassCmpElement: {
    prototype: HTMLSassCmpElement;
    new (): HTMLSassCmpElement;
  };

  interface HTMLScopedBasicElement extends Components.ScopedBasic, HTMLStencilElement {}
  var HTMLScopedBasicElement: {
    prototype: HTMLScopedBasicElement;
    new (): HTMLScopedBasicElement;
  };

  interface HTMLScopedBasicRootElement extends Components.ScopedBasicRoot, HTMLStencilElement {}
  var HTMLScopedBasicRootElement: {
    prototype: HTMLScopedBasicRootElement;
    new (): HTMLScopedBasicRootElement;
  };

  interface HTMLShadowDomArrayElement extends Components.ShadowDomArray, HTMLStencilElement {}
  var HTMLShadowDomArrayElement: {
    prototype: HTMLShadowDomArrayElement;
    new (): HTMLShadowDomArrayElement;
  };

  interface HTMLShadowDomArrayRootElement extends Components.ShadowDomArrayRoot, HTMLStencilElement {}
  var HTMLShadowDomArrayRootElement: {
    prototype: HTMLShadowDomArrayRootElement;
    new (): HTMLShadowDomArrayRootElement;
  };

  interface HTMLShadowDomBasicElement extends Components.ShadowDomBasic, HTMLStencilElement {}
  var HTMLShadowDomBasicElement: {
    prototype: HTMLShadowDomBasicElement;
    new (): HTMLShadowDomBasicElement;
  };

  interface HTMLShadowDomBasicRootElement extends Components.ShadowDomBasicRoot, HTMLStencilElement {}
  var HTMLShadowDomBasicRootElement: {
    prototype: HTMLShadowDomBasicRootElement;
    new (): HTMLShadowDomBasicRootElement;
  };

  interface HTMLShadowDomModeElement extends Components.ShadowDomMode, HTMLStencilElement {}
  var HTMLShadowDomModeElement: {
    prototype: HTMLShadowDomModeElement;
    new (): HTMLShadowDomModeElement;
  };

  interface HTMLShadowDomModeRootElement extends Components.ShadowDomModeRoot, HTMLStencilElement {}
  var HTMLShadowDomModeRootElement: {
    prototype: HTMLShadowDomModeRootElement;
    new (): HTMLShadowDomModeRootElement;
  };

  interface HTMLShadowDomSlotBasicElement extends Components.ShadowDomSlotBasic, HTMLStencilElement {}
  var HTMLShadowDomSlotBasicElement: {
    prototype: HTMLShadowDomSlotBasicElement;
    new (): HTMLShadowDomSlotBasicElement;
  };

  interface HTMLShadowDomSlotNestedElement extends Components.ShadowDomSlotNested, HTMLStencilElement {}
  var HTMLShadowDomSlotNestedElement: {
    prototype: HTMLShadowDomSlotNestedElement;
    new (): HTMLShadowDomSlotNestedElement;
  };

  interface HTMLShadowDomSlotNestedRootElement extends Components.ShadowDomSlotNestedRoot, HTMLStencilElement {}
  var HTMLShadowDomSlotNestedRootElement: {
    prototype: HTMLShadowDomSlotNestedRootElement;
    new (): HTMLShadowDomSlotNestedRootElement;
  };

  interface HTMLSlotArrayBasicElement extends Components.SlotArrayBasic, HTMLStencilElement {}
  var HTMLSlotArrayBasicElement: {
    prototype: HTMLSlotArrayBasicElement;
    new (): HTMLSlotArrayBasicElement;
  };

  interface HTMLSlotArrayComplexElement extends Components.SlotArrayComplex, HTMLStencilElement {}
  var HTMLSlotArrayComplexElement: {
    prototype: HTMLSlotArrayComplexElement;
    new (): HTMLSlotArrayComplexElement;
  };

  interface HTMLSlotArrayComplexRootElement extends Components.SlotArrayComplexRoot, HTMLStencilElement {}
  var HTMLSlotArrayComplexRootElement: {
    prototype: HTMLSlotArrayComplexRootElement;
    new (): HTMLSlotArrayComplexRootElement;
  };

  interface HTMLSlotArrayTopElement extends Components.SlotArrayTop, HTMLStencilElement {}
  var HTMLSlotArrayTopElement: {
    prototype: HTMLSlotArrayTopElement;
    new (): HTMLSlotArrayTopElement;
  };

  interface HTMLSlotBasicElement extends Components.SlotBasic, HTMLStencilElement {}
  var HTMLSlotBasicElement: {
    prototype: HTMLSlotBasicElement;
    new (): HTMLSlotBasicElement;
  };

  interface HTMLSlotBasicOrderElement extends Components.SlotBasicOrder, HTMLStencilElement {}
  var HTMLSlotBasicOrderElement: {
    prototype: HTMLSlotBasicOrderElement;
    new (): HTMLSlotBasicOrderElement;
  };

  interface HTMLSlotBasicOrderRootElement extends Components.SlotBasicOrderRoot, HTMLStencilElement {}
  var HTMLSlotBasicOrderRootElement: {
    prototype: HTMLSlotBasicOrderRootElement;
    new (): HTMLSlotBasicOrderRootElement;
  };

  interface HTMLSlotBasicRootElement extends Components.SlotBasicRoot, HTMLStencilElement {}
  var HTMLSlotBasicRootElement: {
    prototype: HTMLSlotBasicRootElement;
    new (): HTMLSlotBasicRootElement;
  };

  interface HTMLSlotDynamicWrapperElement extends Components.SlotDynamicWrapper, HTMLStencilElement {}
  var HTMLSlotDynamicWrapperElement: {
    prototype: HTMLSlotDynamicWrapperElement;
    new (): HTMLSlotDynamicWrapperElement;
  };

  interface HTMLSlotDynamicWrapperRootElement extends Components.SlotDynamicWrapperRoot, HTMLStencilElement {}
  var HTMLSlotDynamicWrapperRootElement: {
    prototype: HTMLSlotDynamicWrapperRootElement;
    new (): HTMLSlotDynamicWrapperRootElement;
  };

  interface HTMLSlotFallbackElement extends Components.SlotFallback, HTMLStencilElement {}
  var HTMLSlotFallbackElement: {
    prototype: HTMLSlotFallbackElement;
    new (): HTMLSlotFallbackElement;
  };

  interface HTMLSlotFallbackRootElement extends Components.SlotFallbackRoot, HTMLStencilElement {}
  var HTMLSlotFallbackRootElement: {
    prototype: HTMLSlotFallbackRootElement;
    new (): HTMLSlotFallbackRootElement;
  };

  interface HTMLSlotHtmlElement extends Components.SlotHtml, HTMLStencilElement {}
  var HTMLSlotHtmlElement: {
    prototype: HTMLSlotHtmlElement;
    new (): HTMLSlotHtmlElement;
  };

  interface HTMLSlotLightDomContentElement extends Components.SlotLightDomContent, HTMLStencilElement {}
  var HTMLSlotLightDomContentElement: {
    prototype: HTMLSlotLightDomContentElement;
    new (): HTMLSlotLightDomContentElement;
  };

  interface HTMLSlotLightDomRootElement extends Components.SlotLightDomRoot, HTMLStencilElement {}
  var HTMLSlotLightDomRootElement: {
    prototype: HTMLSlotLightDomRootElement;
    new (): HTMLSlotLightDomRootElement;
  };

  interface HTMLSlotMapOrderElement extends Components.SlotMapOrder, HTMLStencilElement {}
  var HTMLSlotMapOrderElement: {
    prototype: HTMLSlotMapOrderElement;
    new (): HTMLSlotMapOrderElement;
  };

  interface HTMLSlotMapOrderRootElement extends Components.SlotMapOrderRoot, HTMLStencilElement {}
  var HTMLSlotMapOrderRootElement: {
    prototype: HTMLSlotMapOrderRootElement;
    new (): HTMLSlotMapOrderRootElement;
  };

  interface HTMLSlotReorderElement extends Components.SlotReorder, HTMLStencilElement {}
  var HTMLSlotReorderElement: {
    prototype: HTMLSlotReorderElement;
    new (): HTMLSlotReorderElement;
  };

  interface HTMLSlotReorderRootElement extends Components.SlotReorderRoot, HTMLStencilElement {}
  var HTMLSlotReorderRootElement: {
    prototype: HTMLSlotReorderRootElement;
    new (): HTMLSlotReorderRootElement;
  };

  interface HTMLSlotReplaceWrapperElement extends Components.SlotReplaceWrapper, HTMLStencilElement {}
  var HTMLSlotReplaceWrapperElement: {
    prototype: HTMLSlotReplaceWrapperElement;
    new (): HTMLSlotReplaceWrapperElement;
  };

  interface HTMLSlotReplaceWrapperRootElement extends Components.SlotReplaceWrapperRoot, HTMLStencilElement {}
  var HTMLSlotReplaceWrapperRootElement: {
    prototype: HTMLSlotReplaceWrapperRootElement;
    new (): HTMLSlotReplaceWrapperRootElement;
  };

  interface HTMLStylusCmpElement extends Components.StylusCmp, HTMLStencilElement {}
  var HTMLStylusCmpElement: {
    prototype: HTMLStylusCmpElement;
    new (): HTMLStylusCmpElement;
  };

  interface HTMLSvgAttrElement extends Components.SvgAttr, HTMLStencilElement {}
  var HTMLSvgAttrElement: {
    prototype: HTMLSvgAttrElement;
    new (): HTMLSvgAttrElement;
  };

  interface HTMLSvgClassElement extends Components.SvgClass, HTMLStencilElement {}
  var HTMLSvgClassElement: {
    prototype: HTMLSvgClassElement;
    new (): HTMLSvgClassElement;
  };

  interface HTMLTag3dComponentElement extends Components.Tag3dComponent, HTMLStencilElement {}
  var HTMLTag3dComponentElement: {
    prototype: HTMLTag3dComponentElement;
    new (): HTMLTag3dComponentElement;
  };

  interface HTMLTag88Element extends Components.Tag88, HTMLStencilElement {}
  var HTMLTag88Element: {
    prototype: HTMLTag88Element;
    new (): HTMLTag88Element;
  };
  interface HTMLElementTagNameMap {
    'attribute-basic': HTMLAttributeBasicElement;
    'attribute-basic-root': HTMLAttributeBasicRootElement;
    'attribute-boolean': HTMLAttributeBooleanElement;
    'attribute-boolean-root': HTMLAttributeBooleanRootElement;
    'attribute-complex': HTMLAttributeComplexElement;
    'attribute-host': HTMLAttributeHostElement;
    'attribute-html-root': HTMLAttributeHtmlRootElement;
    'bad-shared-jsx': HTMLBadSharedJsxElement;
    'conditional-basic': HTMLConditionalBasicElement;
    'conditional-rerender': HTMLConditionalRerenderElement;
    'conditional-rerender-root': HTMLConditionalRerenderRootElement;
    'css-cmp': HTMLCssCmpElement;
    'css-variables-no-encapsulation': HTMLCssVariablesNoEncapsulationElement;
    'css-variables-shadow-dom': HTMLCssVariablesShadowDomElement;
    'custom-event-root': HTMLCustomEventRootElement;
    'dom-reattach': HTMLDomReattachElement;
    'dynamic-css-variable': HTMLDynamicCssVariableElement;
    'dynamic-import': HTMLDynamicImportElement;
    'es5-addclass-svg': HTMLEs5AddclassSvgElement;
    'esm-import': HTMLEsmImportElement;
    'external-import-a': HTMLExternalImportAElement;
    'external-import-b': HTMLExternalImportBElement;
    'external-import-c': HTMLExternalImportCElement;
    'factory-jsx': HTMLFactoryJsxElement;
    'ie-polyfills': HTMLIePolyfillsElement;
    'image-import': HTMLImageImportElement;
    'init-css-root': HTMLInitCssRootElement;
    'input-basic-root': HTMLInputBasicRootElement;
    'json-basic': HTMLJsonBasicElement;
    'key-reorder': HTMLKeyReorderElement;
    'key-reorder-root': HTMLKeyReorderRootElement;
    'legacy-context': HTMLLegacyContextElement;
    'less-cmp': HTMLLessCmpElement;
    'lifecycle-async-a': HTMLLifecycleAsyncAElement;
    'lifecycle-async-b': HTMLLifecycleAsyncBElement;
    'lifecycle-async-c': HTMLLifecycleAsyncCElement;
    'lifecycle-basic-a': HTMLLifecycleBasicAElement;
    'lifecycle-basic-b': HTMLLifecycleBasicBElement;
    'lifecycle-basic-c': HTMLLifecycleBasicCElement;
    'lifecycle-unload-a': HTMLLifecycleUnloadAElement;
    'lifecycle-unload-b': HTMLLifecycleUnloadBElement;
    'lifecycle-unload-root': HTMLLifecycleUnloadRootElement;
    'lifecycle-update-a': HTMLLifecycleUpdateAElement;
    'lifecycle-update-b': HTMLLifecycleUpdateBElement;
    'lifecycle-update-c': HTMLLifecycleUpdateCElement;
    'listen-jsx': HTMLListenJsxElement;
    'listen-jsx-root': HTMLListenJsxRootElement;
    'listen-window': HTMLListenWindowElement;
    'node-globals': HTMLNodeGlobalsElement;
    'node-resolution': HTMLNodeResolutionElement;
    'reflect-to-attr': HTMLReflectToAttrElement;
    'reparent-style-no-vars': HTMLReparentStyleNoVarsElement;
    'reparent-style-with-vars': HTMLReparentStyleWithVarsElement;
    'sass-cmp': HTMLSassCmpElement;
    'scoped-basic': HTMLScopedBasicElement;
    'scoped-basic-root': HTMLScopedBasicRootElement;
    'shadow-dom-array': HTMLShadowDomArrayElement;
    'shadow-dom-array-root': HTMLShadowDomArrayRootElement;
    'shadow-dom-basic': HTMLShadowDomBasicElement;
    'shadow-dom-basic-root': HTMLShadowDomBasicRootElement;
    'shadow-dom-mode': HTMLShadowDomModeElement;
    'shadow-dom-mode-root': HTMLShadowDomModeRootElement;
    'shadow-dom-slot-basic': HTMLShadowDomSlotBasicElement;
    'shadow-dom-slot-nested': HTMLShadowDomSlotNestedElement;
    'shadow-dom-slot-nested-root': HTMLShadowDomSlotNestedRootElement;
    'slot-array-basic': HTMLSlotArrayBasicElement;
    'slot-array-complex': HTMLSlotArrayComplexElement;
    'slot-array-complex-root': HTMLSlotArrayComplexRootElement;
    'slot-array-top': HTMLSlotArrayTopElement;
    'slot-basic': HTMLSlotBasicElement;
    'slot-basic-order': HTMLSlotBasicOrderElement;
    'slot-basic-order-root': HTMLSlotBasicOrderRootElement;
    'slot-basic-root': HTMLSlotBasicRootElement;
    'slot-dynamic-wrapper': HTMLSlotDynamicWrapperElement;
    'slot-dynamic-wrapper-root': HTMLSlotDynamicWrapperRootElement;
    'slot-fallback': HTMLSlotFallbackElement;
    'slot-fallback-root': HTMLSlotFallbackRootElement;
    'slot-html': HTMLSlotHtmlElement;
    'slot-light-dom-content': HTMLSlotLightDomContentElement;
    'slot-light-dom-root': HTMLSlotLightDomRootElement;
    'slot-map-order': HTMLSlotMapOrderElement;
    'slot-map-order-root': HTMLSlotMapOrderRootElement;
    'slot-reorder': HTMLSlotReorderElement;
    'slot-reorder-root': HTMLSlotReorderRootElement;
    'slot-replace-wrapper': HTMLSlotReplaceWrapperElement;
    'slot-replace-wrapper-root': HTMLSlotReplaceWrapperRootElement;
    'stylus-cmp': HTMLStylusCmpElement;
    'svg-attr': HTMLSvgAttrElement;
    'svg-class': HTMLSvgClassElement;
    'tag-3d-component': HTMLTag3dComponentElement;
    'tag-88': HTMLTag88Element;
  }
}

declare namespace LocalJSX {
  interface AttributeBasic extends JSXBase.HTMLAttributes<HTMLAttributeBasicElement> {
    'customAttr'?: string;
    'multiWord'?: string;
    'single'?: string;
  }
  interface AttributeBasicRoot extends JSXBase.HTMLAttributes<HTMLAttributeBasicRootElement> {}
  interface AttributeBoolean extends JSXBase.HTMLAttributes<HTMLAttributeBooleanElement> {
    'boolState'?: boolean;
    'noreflect'?: boolean;
    'strState'?: string;
  }
  interface AttributeBooleanRoot extends JSXBase.HTMLAttributes<HTMLAttributeBooleanRootElement> {}
  interface AttributeComplex extends JSXBase.HTMLAttributes<HTMLAttributeComplexElement> {
    'bool0'?: boolean;
    'bool1'?: boolean;
    'bool2'?: boolean;
    'nu0'?: number;
    'nu1'?: number;
    'nu2'?: SomeTypes.Number;
    'str0'?: string;
    'str1'?: string;
    'str2'?: SomeTypes.String;
  }
  interface AttributeHost extends JSXBase.HTMLAttributes<HTMLAttributeHostElement> {}
  interface AttributeHtmlRoot extends JSXBase.HTMLAttributes<HTMLAttributeHtmlRootElement> {
    'anyAttr'?: any;
    'nuAttr'?: number;
    'strAttr'?: string;
  }
  interface BadSharedJsx extends JSXBase.HTMLAttributes<HTMLBadSharedJsxElement> {}
  interface ConditionalBasic extends JSXBase.HTMLAttributes<HTMLConditionalBasicElement> {}
  interface ConditionalRerender extends JSXBase.HTMLAttributes<HTMLConditionalRerenderElement> {}
  interface ConditionalRerenderRoot extends JSXBase.HTMLAttributes<HTMLConditionalRerenderRootElement> {}
  interface CssCmp extends JSXBase.HTMLAttributes<HTMLCssCmpElement> {}
  interface CssVariablesNoEncapsulation extends JSXBase.HTMLAttributes<HTMLCssVariablesNoEncapsulationElement> {}
  interface CssVariablesShadowDom extends JSXBase.HTMLAttributes<HTMLCssVariablesShadowDomElement> {}
  interface CustomEventRoot extends JSXBase.HTMLAttributes<HTMLCustomEventRootElement> {}
  interface DomReattach extends JSXBase.HTMLAttributes<HTMLDomReattachElement> {
    'didLoad'?: number;
    'didUnload'?: number;
    'willLoad'?: number;
  }
  interface DynamicCssVariable extends JSXBase.HTMLAttributes<HTMLDynamicCssVariableElement> {}
  interface DynamicImport extends JSXBase.HTMLAttributes<HTMLDynamicImportElement> {}
  interface Es5AddclassSvg extends JSXBase.HTMLAttributes<HTMLEs5AddclassSvgElement> {}
  interface EsmImport extends JSXBase.HTMLAttributes<HTMLEsmImportElement> {
    'onSomeEvent'?: (event: CustomEvent<any>) => void;
    'propVal'?: number;
  }
  interface ExternalImportA extends JSXBase.HTMLAttributes<HTMLExternalImportAElement> {}
  interface ExternalImportB extends JSXBase.HTMLAttributes<HTMLExternalImportBElement> {}
  interface ExternalImportC extends JSXBase.HTMLAttributes<HTMLExternalImportCElement> {}
  interface FactoryJsx extends JSXBase.HTMLAttributes<HTMLFactoryJsxElement> {}
  interface IePolyfills extends JSXBase.HTMLAttributes<HTMLIePolyfillsElement> {}
  interface ImageImport extends JSXBase.HTMLAttributes<HTMLImageImportElement> {}
  interface InitCssRoot extends JSXBase.HTMLAttributes<HTMLInitCssRootElement> {}
  interface InputBasicRoot extends JSXBase.HTMLAttributes<HTMLInputBasicRootElement> {
    'value'?: string;
  }
  interface JsonBasic extends JSXBase.HTMLAttributes<HTMLJsonBasicElement> {}
  interface KeyReorder extends JSXBase.HTMLAttributes<HTMLKeyReorderElement> {
    'num'?: number;
  }
  interface KeyReorderRoot extends JSXBase.HTMLAttributes<HTMLKeyReorderRootElement> {}
  interface LegacyContext extends JSXBase.HTMLAttributes<HTMLLegacyContextElement> {}
  interface LessCmp extends JSXBase.HTMLAttributes<HTMLLessCmpElement> {}
  interface LifecycleAsyncA extends JSXBase.HTMLAttributes<HTMLLifecycleAsyncAElement> {}
  interface LifecycleAsyncB extends JSXBase.HTMLAttributes<HTMLLifecycleAsyncBElement> {
    'onLifecycleLoad'?: (event: CustomEvent<any>) => void;
    'onLifecycleUpdate'?: (event: CustomEvent<any>) => void;
    'value'?: string;
  }
  interface LifecycleAsyncC extends JSXBase.HTMLAttributes<HTMLLifecycleAsyncCElement> {
    'onLifecycleLoad'?: (event: CustomEvent<any>) => void;
    'onLifecycleUpdate'?: (event: CustomEvent<any>) => void;
    'value'?: string;
  }
  interface LifecycleBasicA extends JSXBase.HTMLAttributes<HTMLLifecycleBasicAElement> {}
  interface LifecycleBasicB extends JSXBase.HTMLAttributes<HTMLLifecycleBasicBElement> {
    'onLifecycleLoad'?: (event: CustomEvent<any>) => void;
    'onLifecycleUpdate'?: (event: CustomEvent<any>) => void;
    'value'?: string;
  }
  interface LifecycleBasicC extends JSXBase.HTMLAttributes<HTMLLifecycleBasicCElement> {
    'onLifecycleLoad'?: (event: CustomEvent<any>) => void;
    'onLifecycleUpdate'?: (event: CustomEvent<any>) => void;
    'value'?: string;
  }
  interface LifecycleUnloadA extends JSXBase.HTMLAttributes<HTMLLifecycleUnloadAElement> {}
  interface LifecycleUnloadB extends JSXBase.HTMLAttributes<HTMLLifecycleUnloadBElement> {}
  interface LifecycleUnloadRoot extends JSXBase.HTMLAttributes<HTMLLifecycleUnloadRootElement> {}
  interface LifecycleUpdateA extends JSXBase.HTMLAttributes<HTMLLifecycleUpdateAElement> {}
  interface LifecycleUpdateB extends JSXBase.HTMLAttributes<HTMLLifecycleUpdateBElement> {
    'value'?: number;
  }
  interface LifecycleUpdateC extends JSXBase.HTMLAttributes<HTMLLifecycleUpdateCElement> {
    'value'?: number;
  }
  interface ListenJsx extends JSXBase.HTMLAttributes<HTMLListenJsxElement> {}
  interface ListenJsxRoot extends JSXBase.HTMLAttributes<HTMLListenJsxRootElement> {}
  interface ListenWindow extends JSXBase.HTMLAttributes<HTMLListenWindowElement> {}
  interface NodeGlobals extends JSXBase.HTMLAttributes<HTMLNodeGlobalsElement> {}
  interface NodeResolution extends JSXBase.HTMLAttributes<HTMLNodeResolutionElement> {}
  interface ReflectToAttr extends JSXBase.HTMLAttributes<HTMLReflectToAttrElement> {
    'bool'?: boolean;
    'disabled'?: boolean;
    'dynamicNu'?: number;
    'dynamicStr'?: string;
    'nu'?: number;
    'null'?: string | null;
    'otherBool'?: boolean;
    'str'?: string;
    'undef'?: string;
  }
  interface ReparentStyleNoVars extends JSXBase.HTMLAttributes<HTMLReparentStyleNoVarsElement> {}
  interface ReparentStyleWithVars extends JSXBase.HTMLAttributes<HTMLReparentStyleWithVarsElement> {}
  interface SassCmp extends JSXBase.HTMLAttributes<HTMLSassCmpElement> {}
  interface ScopedBasic extends JSXBase.HTMLAttributes<HTMLScopedBasicElement> {}
  interface ScopedBasicRoot extends JSXBase.HTMLAttributes<HTMLScopedBasicRootElement> {}
  interface ShadowDomArray extends JSXBase.HTMLAttributes<HTMLShadowDomArrayElement> {
    'values'?: number[];
  }
  interface ShadowDomArrayRoot extends JSXBase.HTMLAttributes<HTMLShadowDomArrayRootElement> {}
  interface ShadowDomBasic extends JSXBase.HTMLAttributes<HTMLShadowDomBasicElement> {}
  interface ShadowDomBasicRoot extends JSXBase.HTMLAttributes<HTMLShadowDomBasicRootElement> {}
  interface ShadowDomMode extends JSXBase.HTMLAttributes<HTMLShadowDomModeElement> {
    /**
    * The mode determines which platform styles to use.
    */
    'colormode'?: string;
  }
  interface ShadowDomModeRoot extends JSXBase.HTMLAttributes<HTMLShadowDomModeRootElement> {}
  interface ShadowDomSlotBasic extends JSXBase.HTMLAttributes<HTMLShadowDomSlotBasicElement> {}
  interface ShadowDomSlotNested extends JSXBase.HTMLAttributes<HTMLShadowDomSlotNestedElement> {
    'i'?: number;
  }
  interface ShadowDomSlotNestedRoot extends JSXBase.HTMLAttributes<HTMLShadowDomSlotNestedRootElement> {}
  interface SlotArrayBasic extends JSXBase.HTMLAttributes<HTMLSlotArrayBasicElement> {}
  interface SlotArrayComplex extends JSXBase.HTMLAttributes<HTMLSlotArrayComplexElement> {}
  interface SlotArrayComplexRoot extends JSXBase.HTMLAttributes<HTMLSlotArrayComplexRootElement> {}
  interface SlotArrayTop extends JSXBase.HTMLAttributes<HTMLSlotArrayTopElement> {}
  interface SlotBasic extends JSXBase.HTMLAttributes<HTMLSlotBasicElement> {}
  interface SlotBasicOrder extends JSXBase.HTMLAttributes<HTMLSlotBasicOrderElement> {}
  interface SlotBasicOrderRoot extends JSXBase.HTMLAttributes<HTMLSlotBasicOrderRootElement> {}
  interface SlotBasicRoot extends JSXBase.HTMLAttributes<HTMLSlotBasicRootElement> {}
  interface SlotDynamicWrapper extends JSXBase.HTMLAttributes<HTMLSlotDynamicWrapperElement> {
    'tag'?: string;
  }
  interface SlotDynamicWrapperRoot extends JSXBase.HTMLAttributes<HTMLSlotDynamicWrapperRootElement> {}
  interface SlotFallback extends JSXBase.HTMLAttributes<HTMLSlotFallbackElement> {
    'inc'?: number;
  }
  interface SlotFallbackRoot extends JSXBase.HTMLAttributes<HTMLSlotFallbackRootElement> {}
  interface SlotHtml extends JSXBase.HTMLAttributes<HTMLSlotHtmlElement> {
    'inc'?: number;
  }
  interface SlotLightDomContent extends JSXBase.HTMLAttributes<HTMLSlotLightDomContentElement> {}
  interface SlotLightDomRoot extends JSXBase.HTMLAttributes<HTMLSlotLightDomRootElement> {}
  interface SlotMapOrder extends JSXBase.HTMLAttributes<HTMLSlotMapOrderElement> {}
  interface SlotMapOrderRoot extends JSXBase.HTMLAttributes<HTMLSlotMapOrderRootElement> {}
  interface SlotReorder extends JSXBase.HTMLAttributes<HTMLSlotReorderElement> {
    'reordered'?: boolean;
  }
  interface SlotReorderRoot extends JSXBase.HTMLAttributes<HTMLSlotReorderRootElement> {}
  interface SlotReplaceWrapper extends JSXBase.HTMLAttributes<HTMLSlotReplaceWrapperElement> {
    'href'?: string;
  }
  interface SlotReplaceWrapperRoot extends JSXBase.HTMLAttributes<HTMLSlotReplaceWrapperRootElement> {}
  interface StylusCmp extends JSXBase.HTMLAttributes<HTMLStylusCmpElement> {}
  interface SvgAttr extends JSXBase.HTMLAttributes<HTMLSvgAttrElement> {}
  interface SvgClass extends JSXBase.HTMLAttributes<HTMLSvgClassElement> {}
  interface Tag3dComponent extends JSXBase.HTMLAttributes<HTMLTag3dComponentElement> {}
  interface Tag88 extends JSXBase.HTMLAttributes<HTMLTag88Element> {}

  interface IntrinsicElements {
    'attribute-basic': AttributeBasic;
    'attribute-basic-root': AttributeBasicRoot;
    'attribute-boolean': AttributeBoolean;
    'attribute-boolean-root': AttributeBooleanRoot;
    'attribute-complex': AttributeComplex;
    'attribute-host': AttributeHost;
    'attribute-html-root': AttributeHtmlRoot;
    'bad-shared-jsx': BadSharedJsx;
    'conditional-basic': ConditionalBasic;
    'conditional-rerender': ConditionalRerender;
    'conditional-rerender-root': ConditionalRerenderRoot;
    'css-cmp': CssCmp;
    'css-variables-no-encapsulation': CssVariablesNoEncapsulation;
    'css-variables-shadow-dom': CssVariablesShadowDom;
    'custom-event-root': CustomEventRoot;
    'dom-reattach': DomReattach;
    'dynamic-css-variable': DynamicCssVariable;
    'dynamic-import': DynamicImport;
    'es5-addclass-svg': Es5AddclassSvg;
    'esm-import': EsmImport;
    'external-import-a': ExternalImportA;
    'external-import-b': ExternalImportB;
    'external-import-c': ExternalImportC;
    'factory-jsx': FactoryJsx;
    'ie-polyfills': IePolyfills;
    'image-import': ImageImport;
    'init-css-root': InitCssRoot;
    'input-basic-root': InputBasicRoot;
    'json-basic': JsonBasic;
    'key-reorder': KeyReorder;
    'key-reorder-root': KeyReorderRoot;
    'legacy-context': LegacyContext;
    'less-cmp': LessCmp;
    'lifecycle-async-a': LifecycleAsyncA;
    'lifecycle-async-b': LifecycleAsyncB;
    'lifecycle-async-c': LifecycleAsyncC;
    'lifecycle-basic-a': LifecycleBasicA;
    'lifecycle-basic-b': LifecycleBasicB;
    'lifecycle-basic-c': LifecycleBasicC;
    'lifecycle-unload-a': LifecycleUnloadA;
    'lifecycle-unload-b': LifecycleUnloadB;
    'lifecycle-unload-root': LifecycleUnloadRoot;
    'lifecycle-update-a': LifecycleUpdateA;
    'lifecycle-update-b': LifecycleUpdateB;
    'lifecycle-update-c': LifecycleUpdateC;
    'listen-jsx': ListenJsx;
    'listen-jsx-root': ListenJsxRoot;
    'listen-window': ListenWindow;
    'node-globals': NodeGlobals;
    'node-resolution': NodeResolution;
    'reflect-to-attr': ReflectToAttr;
    'reparent-style-no-vars': ReparentStyleNoVars;
    'reparent-style-with-vars': ReparentStyleWithVars;
    'sass-cmp': SassCmp;
    'scoped-basic': ScopedBasic;
    'scoped-basic-root': ScopedBasicRoot;
    'shadow-dom-array': ShadowDomArray;
    'shadow-dom-array-root': ShadowDomArrayRoot;
    'shadow-dom-basic': ShadowDomBasic;
    'shadow-dom-basic-root': ShadowDomBasicRoot;
    'shadow-dom-mode': ShadowDomMode;
    'shadow-dom-mode-root': ShadowDomModeRoot;
    'shadow-dom-slot-basic': ShadowDomSlotBasic;
    'shadow-dom-slot-nested': ShadowDomSlotNested;
    'shadow-dom-slot-nested-root': ShadowDomSlotNestedRoot;
    'slot-array-basic': SlotArrayBasic;
    'slot-array-complex': SlotArrayComplex;
    'slot-array-complex-root': SlotArrayComplexRoot;
    'slot-array-top': SlotArrayTop;
    'slot-basic': SlotBasic;
    'slot-basic-order': SlotBasicOrder;
    'slot-basic-order-root': SlotBasicOrderRoot;
    'slot-basic-root': SlotBasicRoot;
    'slot-dynamic-wrapper': SlotDynamicWrapper;
    'slot-dynamic-wrapper-root': SlotDynamicWrapperRoot;
    'slot-fallback': SlotFallback;
    'slot-fallback-root': SlotFallbackRoot;
    'slot-html': SlotHtml;
    'slot-light-dom-content': SlotLightDomContent;
    'slot-light-dom-root': SlotLightDomRoot;
    'slot-map-order': SlotMapOrder;
    'slot-map-order-root': SlotMapOrderRoot;
    'slot-reorder': SlotReorder;
    'slot-reorder-root': SlotReorderRoot;
    'slot-replace-wrapper': SlotReplaceWrapper;
    'slot-replace-wrapper-root': SlotReplaceWrapperRoot;
    'stylus-cmp': StylusCmp;
    'svg-attr': SvgAttr;
    'svg-class': SvgClass;
    'tag-3d-component': Tag3dComponent;
    'tag-88': Tag88;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


