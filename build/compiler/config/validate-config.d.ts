import { Diagnostic, LoadConfigInit, UnvalidatedConfig, ValidatedConfig } from '../../declarations';
/**
 * Represents the results of validating a previously unvalidated configuration
 */
type ConfigValidationResults = {
    /**
     * The validated configuration, with well-known default values set if they weren't previously provided
     */
    config: ValidatedConfig;
    /**
     * A collection of errors and warnings that occurred during the configuration validation process
     */
    diagnostics: Diagnostic[];
};
/**
 * Validate a Config object, ensuring that all its field are present and
 * consistent with our expectations. This function transforms an
 * {@link UnvalidatedConfig} to a {@link ValidatedConfig}.
 *
 * **NOTE**: this function _may_ return a previously-cached configuration
 * object. It will do so if the cached object is `===` to the one passed in.
 *
 * @param userConfig an unvalidated config that we've gotten from a user
 * @param bootstrapConfig the initial configuration provided by the user (or
 * generated by Stencil) used to bootstrap configuration loading and validation
 * @returns an object with config and diagnostics props
 */
export declare const validateConfig: (userConfig: UnvalidatedConfig, bootstrapConfig: LoadConfigInit) => ConfigValidationResults;
export {};
