/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CarData } from "./car-list/car-data";
export { CarData } from "./car-list/car-data";
export namespace Components {
    interface AnotherCarDetail {
        "car": CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface AnotherCarList {
        "cars": CarData[];
        "selected": CarData;
    }
    interface AppRoot {
    }
    interface BuildData {
    }
    interface CarDetail {
        "car": CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface CarList {
        "cars": CarData[];
        "selected": CarData;
    }
    interface CmpA {
    }
    interface CmpB {
    }
    interface CmpC {
    }
    interface CmpDsd {
        "initialCounter": number;
    }
    interface CmpServerVsClient {
    }
    interface DomApi {
    }
    interface DomInteraction {
    }
    interface DomVisible {
    }
    interface ElementCmp {
    }
    interface EmptyCmp {
    }
    interface EmptyCmpShadow {
    }
    interface EnvData {
    }
    interface EventCmp {
        /**
          * this is some method that fires an event with options
          * @param mph some value
          * @returns
         */
        "methodThatFiresEventWithOptions": (mph: number) => Promise<void>;
        /**
          * this is some method that fires a document event
          * @returns
         */
        "methodThatFiresMyDocumentEvent": () => Promise<void>;
        /**
          * this is some method that fires a window event
          * @param value some value
          * @returns
         */
        "methodThatFiresMyWindowEvent": (value: number) => Promise<void>;
    }
    interface ImportAssets {
    }
    interface ListenCmp {
        "opened": boolean;
    }
    interface MethodCmp {
        /**
          * this is some method
          * @returns some number
         */
        "someMethod": () => Promise<number>;
        /**
          * this is some method with args
          * @param unit some unit
          * @param value some value
          * @returns some string
         */
        "someMethodWithArgs": (unit: string, value: number) => Promise<string>;
        "someProp": number;
    }
    interface PathAliasCmp {
    }
    interface PrerenderCmp {
    }
    interface PropCmp {
        "first": string;
        "lastName": string;
        /**
          * Mode
         */
        "mode"?: any;
    }
    interface ScopedCarDetail {
        "car": CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface ScopedCarList {
        "cars": CarData[];
        "selected": CarData;
    }
    interface SlotCmp {
    }
    interface SlotCmpContainer {
    }
    interface SlotParentCmp {
        "label": string;
    }
    interface StateCmp {
    }
}
export interface AnotherCarListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnotherCarListElement;
}
export interface CarListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarListElement;
}
export interface EventCmpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEventCmpElement;
}
export interface ScopedCarListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScopedCarListElement;
}
declare global {
    interface HTMLAnotherCarDetailElement extends Components.AnotherCarDetail, HTMLStencilElement {
    }
    var HTMLAnotherCarDetailElement: {
        prototype: HTMLAnotherCarDetailElement;
        new (): HTMLAnotherCarDetailElement;
    };
    interface HTMLAnotherCarListElementEventMap {
        "carSelected": CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface HTMLAnotherCarListElement extends Components.AnotherCarList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnotherCarListElementEventMap>(type: K, listener: (this: HTMLAnotherCarListElement, ev: AnotherCarListCustomEvent<HTMLAnotherCarListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnotherCarListElementEventMap>(type: K, listener: (this: HTMLAnotherCarListElement, ev: AnotherCarListCustomEvent<HTMLAnotherCarListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnotherCarListElement: {
        prototype: HTMLAnotherCarListElement;
        new (): HTMLAnotherCarListElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLBuildDataElement extends Components.BuildData, HTMLStencilElement {
    }
    var HTMLBuildDataElement: {
        prototype: HTMLBuildDataElement;
        new (): HTMLBuildDataElement;
    };
    interface HTMLCarDetailElement extends Components.CarDetail, HTMLStencilElement {
    }
    var HTMLCarDetailElement: {
        prototype: HTMLCarDetailElement;
        new (): HTMLCarDetailElement;
    };
    interface HTMLCarListElementEventMap {
        "carSelected": CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface HTMLCarListElement extends Components.CarList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCarListElementEventMap>(type: K, listener: (this: HTMLCarListElement, ev: CarListCustomEvent<HTMLCarListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCarListElementEventMap>(type: K, listener: (this: HTMLCarListElement, ev: CarListCustomEvent<HTMLCarListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCarListElement: {
        prototype: HTMLCarListElement;
        new (): HTMLCarListElement;
    };
    interface HTMLCmpAElement extends Components.CmpA, HTMLStencilElement {
    }
    var HTMLCmpAElement: {
        prototype: HTMLCmpAElement;
        new (): HTMLCmpAElement;
    };
    interface HTMLCmpBElement extends Components.CmpB, HTMLStencilElement {
    }
    var HTMLCmpBElement: {
        prototype: HTMLCmpBElement;
        new (): HTMLCmpBElement;
    };
    interface HTMLCmpCElement extends Components.CmpC, HTMLStencilElement {
    }
    var HTMLCmpCElement: {
        prototype: HTMLCmpCElement;
        new (): HTMLCmpCElement;
    };
    interface HTMLCmpDsdElement extends Components.CmpDsd, HTMLStencilElement {
    }
    var HTMLCmpDsdElement: {
        prototype: HTMLCmpDsdElement;
        new (): HTMLCmpDsdElement;
    };
    interface HTMLCmpServerVsClientElement extends Components.CmpServerVsClient, HTMLStencilElement {
    }
    var HTMLCmpServerVsClientElement: {
        prototype: HTMLCmpServerVsClientElement;
        new (): HTMLCmpServerVsClientElement;
    };
    interface HTMLDomApiElement extends Components.DomApi, HTMLStencilElement {
    }
    var HTMLDomApiElement: {
        prototype: HTMLDomApiElement;
        new (): HTMLDomApiElement;
    };
    interface HTMLDomInteractionElement extends Components.DomInteraction, HTMLStencilElement {
    }
    var HTMLDomInteractionElement: {
        prototype: HTMLDomInteractionElement;
        new (): HTMLDomInteractionElement;
    };
    interface HTMLDomVisibleElement extends Components.DomVisible, HTMLStencilElement {
    }
    var HTMLDomVisibleElement: {
        prototype: HTMLDomVisibleElement;
        new (): HTMLDomVisibleElement;
    };
    interface HTMLElementCmpElement extends Components.ElementCmp, HTMLStencilElement {
    }
    var HTMLElementCmpElement: {
        prototype: HTMLElementCmpElement;
        new (): HTMLElementCmpElement;
    };
    interface HTMLEmptyCmpElement extends Components.EmptyCmp, HTMLStencilElement {
    }
    var HTMLEmptyCmpElement: {
        prototype: HTMLEmptyCmpElement;
        new (): HTMLEmptyCmpElement;
    };
    interface HTMLEmptyCmpShadowElement extends Components.EmptyCmpShadow, HTMLStencilElement {
    }
    var HTMLEmptyCmpShadowElement: {
        prototype: HTMLEmptyCmpShadowElement;
        new (): HTMLEmptyCmpShadowElement;
    };
    interface HTMLEnvDataElement extends Components.EnvData, HTMLStencilElement {
    }
    var HTMLEnvDataElement: {
        prototype: HTMLEnvDataElement;
        new (): HTMLEnvDataElement;
    };
    interface HTMLEventCmpElementEventMap {
        "myDocumentEvent": any;
        "my-event-with-options": { mph: number };
        "myWindowEvent": number;
    }
    interface HTMLEventCmpElement extends Components.EventCmp, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEventCmpElementEventMap>(type: K, listener: (this: HTMLEventCmpElement, ev: EventCmpCustomEvent<HTMLEventCmpElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEventCmpElementEventMap>(type: K, listener: (this: HTMLEventCmpElement, ev: EventCmpCustomEvent<HTMLEventCmpElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEventCmpElement: {
        prototype: HTMLEventCmpElement;
        new (): HTMLEventCmpElement;
    };
    interface HTMLImportAssetsElement extends Components.ImportAssets, HTMLStencilElement {
    }
    var HTMLImportAssetsElement: {
        prototype: HTMLImportAssetsElement;
        new (): HTMLImportAssetsElement;
    };
    interface HTMLListenCmpElement extends Components.ListenCmp, HTMLStencilElement {
    }
    var HTMLListenCmpElement: {
        prototype: HTMLListenCmpElement;
        new (): HTMLListenCmpElement;
    };
    interface HTMLMethodCmpElement extends Components.MethodCmp, HTMLStencilElement {
    }
    var HTMLMethodCmpElement: {
        prototype: HTMLMethodCmpElement;
        new (): HTMLMethodCmpElement;
    };
    interface HTMLPathAliasCmpElement extends Components.PathAliasCmp, HTMLStencilElement {
    }
    var HTMLPathAliasCmpElement: {
        prototype: HTMLPathAliasCmpElement;
        new (): HTMLPathAliasCmpElement;
    };
    interface HTMLPrerenderCmpElement extends Components.PrerenderCmp, HTMLStencilElement {
    }
    var HTMLPrerenderCmpElement: {
        prototype: HTMLPrerenderCmpElement;
        new (): HTMLPrerenderCmpElement;
    };
    interface HTMLPropCmpElement extends Components.PropCmp, HTMLStencilElement {
    }
    var HTMLPropCmpElement: {
        prototype: HTMLPropCmpElement;
        new (): HTMLPropCmpElement;
    };
    interface HTMLScopedCarDetailElement extends Components.ScopedCarDetail, HTMLStencilElement {
    }
    var HTMLScopedCarDetailElement: {
        prototype: HTMLScopedCarDetailElement;
        new (): HTMLScopedCarDetailElement;
    };
    interface HTMLScopedCarListElementEventMap {
        "carSelected": CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface HTMLScopedCarListElement extends Components.ScopedCarList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScopedCarListElementEventMap>(type: K, listener: (this: HTMLScopedCarListElement, ev: ScopedCarListCustomEvent<HTMLScopedCarListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScopedCarListElementEventMap>(type: K, listener: (this: HTMLScopedCarListElement, ev: ScopedCarListCustomEvent<HTMLScopedCarListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScopedCarListElement: {
        prototype: HTMLScopedCarListElement;
        new (): HTMLScopedCarListElement;
    };
    interface HTMLSlotCmpElement extends Components.SlotCmp, HTMLStencilElement {
    }
    var HTMLSlotCmpElement: {
        prototype: HTMLSlotCmpElement;
        new (): HTMLSlotCmpElement;
    };
    interface HTMLSlotCmpContainerElement extends Components.SlotCmpContainer, HTMLStencilElement {
    }
    var HTMLSlotCmpContainerElement: {
        prototype: HTMLSlotCmpContainerElement;
        new (): HTMLSlotCmpContainerElement;
    };
    interface HTMLSlotParentCmpElement extends Components.SlotParentCmp, HTMLStencilElement {
    }
    var HTMLSlotParentCmpElement: {
        prototype: HTMLSlotParentCmpElement;
        new (): HTMLSlotParentCmpElement;
    };
    interface HTMLStateCmpElement extends Components.StateCmp, HTMLStencilElement {
    }
    var HTMLStateCmpElement: {
        prototype: HTMLStateCmpElement;
        new (): HTMLStateCmpElement;
    };
    interface HTMLElementTagNameMap {
        "another-car-detail": HTMLAnotherCarDetailElement;
        "another-car-list": HTMLAnotherCarListElement;
        "app-root": HTMLAppRootElement;
        "build-data": HTMLBuildDataElement;
        "car-detail": HTMLCarDetailElement;
        "car-list": HTMLCarListElement;
        "cmp-a": HTMLCmpAElement;
        "cmp-b": HTMLCmpBElement;
        "cmp-c": HTMLCmpCElement;
        "cmp-dsd": HTMLCmpDsdElement;
        "cmp-server-vs-client": HTMLCmpServerVsClientElement;
        "dom-api": HTMLDomApiElement;
        "dom-interaction": HTMLDomInteractionElement;
        "dom-visible": HTMLDomVisibleElement;
        "element-cmp": HTMLElementCmpElement;
        "empty-cmp": HTMLEmptyCmpElement;
        "empty-cmp-shadow": HTMLEmptyCmpShadowElement;
        "env-data": HTMLEnvDataElement;
        "event-cmp": HTMLEventCmpElement;
        "import-assets": HTMLImportAssetsElement;
        "listen-cmp": HTMLListenCmpElement;
        "method-cmp": HTMLMethodCmpElement;
        "path-alias-cmp": HTMLPathAliasCmpElement;
        "prerender-cmp": HTMLPrerenderCmpElement;
        "prop-cmp": HTMLPropCmpElement;
        "scoped-car-detail": HTMLScopedCarDetailElement;
        "scoped-car-list": HTMLScopedCarListElement;
        "slot-cmp": HTMLSlotCmpElement;
        "slot-cmp-container": HTMLSlotCmpContainerElement;
        "slot-parent-cmp": HTMLSlotParentCmpElement;
        "state-cmp": HTMLStateCmpElement;
    }
}
declare namespace LocalJSX {
    interface AnotherCarDetail {
        "car"?: CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface AnotherCarList {
        "cars"?: CarData[];
        "onCarSelected"?: (event: AnotherCarListCustomEvent<CarData>) => void;
        "selected"?: CarData;
    }
    interface AppRoot {
    }
    interface BuildData {
    }
    interface CarDetail {
        "car"?: CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface CarList {
        "cars"?: CarData[];
        "onCarSelected"?: (event: CarListCustomEvent<CarData>) => void;
        "selected"?: CarData;
    }
    interface CmpA {
    }
    interface CmpB {
    }
    interface CmpC {
    }
    interface CmpDsd {
        "initialCounter"?: number;
    }
    interface CmpServerVsClient {
    }
    interface DomApi {
    }
    interface DomInteraction {
    }
    interface DomVisible {
    }
    interface ElementCmp {
    }
    interface EmptyCmp {
    }
    interface EmptyCmpShadow {
    }
    interface EnvData {
    }
    interface EventCmp {
        "onMy-event-with-options"?: (event: EventCmpCustomEvent<{ mph: number }>) => void;
        "onMyDocumentEvent"?: (event: EventCmpCustomEvent<any>) => void;
        "onMyWindowEvent"?: (event: EventCmpCustomEvent<number>) => void;
    }
    interface ImportAssets {
    }
    interface ListenCmp {
        "opened"?: boolean;
    }
    interface MethodCmp {
        "someProp"?: number;
    }
    interface PathAliasCmp {
    }
    interface PrerenderCmp {
    }
    interface PropCmp {
        "first"?: string;
        "lastName"?: string;
        /**
          * Mode
         */
        "mode"?: any;
    }
    interface ScopedCarDetail {
        "car"?: CarData;
    }
    /**
     * Component that helps display a list of cars
     */
    interface ScopedCarList {
        "cars"?: CarData[];
        "onCarSelected"?: (event: ScopedCarListCustomEvent<CarData>) => void;
        "selected"?: CarData;
    }
    interface SlotCmp {
    }
    interface SlotCmpContainer {
    }
    interface SlotParentCmp {
        "label"?: string;
    }
    interface StateCmp {
    }
    interface IntrinsicElements {
        "another-car-detail": AnotherCarDetail;
        "another-car-list": AnotherCarList;
        "app-root": AppRoot;
        "build-data": BuildData;
        "car-detail": CarDetail;
        "car-list": CarList;
        "cmp-a": CmpA;
        "cmp-b": CmpB;
        "cmp-c": CmpC;
        "cmp-dsd": CmpDsd;
        "cmp-server-vs-client": CmpServerVsClient;
        "dom-api": DomApi;
        "dom-interaction": DomInteraction;
        "dom-visible": DomVisible;
        "element-cmp": ElementCmp;
        "empty-cmp": EmptyCmp;
        "empty-cmp-shadow": EmptyCmpShadow;
        "env-data": EnvData;
        "event-cmp": EventCmp;
        "import-assets": ImportAssets;
        "listen-cmp": ListenCmp;
        "method-cmp": MethodCmp;
        "path-alias-cmp": PathAliasCmp;
        "prerender-cmp": PrerenderCmp;
        "prop-cmp": PropCmp;
        "scoped-car-detail": ScopedCarDetail;
        "scoped-car-list": ScopedCarList;
        "slot-cmp": SlotCmp;
        "slot-cmp-container": SlotCmpContainer;
        "slot-parent-cmp": SlotParentCmp;
        "state-cmp": StateCmp;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "another-car-detail": LocalJSX.AnotherCarDetail & JSXBase.HTMLAttributes<HTMLAnotherCarDetailElement>;
            /**
             * Component that helps display a list of cars
             */
            "another-car-list": LocalJSX.AnotherCarList & JSXBase.HTMLAttributes<HTMLAnotherCarListElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "build-data": LocalJSX.BuildData & JSXBase.HTMLAttributes<HTMLBuildDataElement>;
            "car-detail": LocalJSX.CarDetail & JSXBase.HTMLAttributes<HTMLCarDetailElement>;
            /**
             * Component that helps display a list of cars
             */
            "car-list": LocalJSX.CarList & JSXBase.HTMLAttributes<HTMLCarListElement>;
            "cmp-a": LocalJSX.CmpA & JSXBase.HTMLAttributes<HTMLCmpAElement>;
            "cmp-b": LocalJSX.CmpB & JSXBase.HTMLAttributes<HTMLCmpBElement>;
            "cmp-c": LocalJSX.CmpC & JSXBase.HTMLAttributes<HTMLCmpCElement>;
            "cmp-dsd": LocalJSX.CmpDsd & JSXBase.HTMLAttributes<HTMLCmpDsdElement>;
            "cmp-server-vs-client": LocalJSX.CmpServerVsClient & JSXBase.HTMLAttributes<HTMLCmpServerVsClientElement>;
            "dom-api": LocalJSX.DomApi & JSXBase.HTMLAttributes<HTMLDomApiElement>;
            "dom-interaction": LocalJSX.DomInteraction & JSXBase.HTMLAttributes<HTMLDomInteractionElement>;
            "dom-visible": LocalJSX.DomVisible & JSXBase.HTMLAttributes<HTMLDomVisibleElement>;
            "element-cmp": LocalJSX.ElementCmp & JSXBase.HTMLAttributes<HTMLElementCmpElement>;
            "empty-cmp": LocalJSX.EmptyCmp & JSXBase.HTMLAttributes<HTMLEmptyCmpElement>;
            "empty-cmp-shadow": LocalJSX.EmptyCmpShadow & JSXBase.HTMLAttributes<HTMLEmptyCmpShadowElement>;
            "env-data": LocalJSX.EnvData & JSXBase.HTMLAttributes<HTMLEnvDataElement>;
            "event-cmp": LocalJSX.EventCmp & JSXBase.HTMLAttributes<HTMLEventCmpElement>;
            "import-assets": LocalJSX.ImportAssets & JSXBase.HTMLAttributes<HTMLImportAssetsElement>;
            "listen-cmp": LocalJSX.ListenCmp & JSXBase.HTMLAttributes<HTMLListenCmpElement>;
            "method-cmp": LocalJSX.MethodCmp & JSXBase.HTMLAttributes<HTMLMethodCmpElement>;
            "path-alias-cmp": LocalJSX.PathAliasCmp & JSXBase.HTMLAttributes<HTMLPathAliasCmpElement>;
            "prerender-cmp": LocalJSX.PrerenderCmp & JSXBase.HTMLAttributes<HTMLPrerenderCmpElement>;
            "prop-cmp": LocalJSX.PropCmp & JSXBase.HTMLAttributes<HTMLPropCmpElement>;
            "scoped-car-detail": LocalJSX.ScopedCarDetail & JSXBase.HTMLAttributes<HTMLScopedCarDetailElement>;
            /**
             * Component that helps display a list of cars
             */
            "scoped-car-list": LocalJSX.ScopedCarList & JSXBase.HTMLAttributes<HTMLScopedCarListElement>;
            "slot-cmp": LocalJSX.SlotCmp & JSXBase.HTMLAttributes<HTMLSlotCmpElement>;
            "slot-cmp-container": LocalJSX.SlotCmpContainer & JSXBase.HTMLAttributes<HTMLSlotCmpContainerElement>;
            "slot-parent-cmp": LocalJSX.SlotParentCmp & JSXBase.HTMLAttributes<HTMLSlotParentCmpElement>;
            "state-cmp": LocalJSX.StateCmp & JSXBase.HTMLAttributes<HTMLStateCmpElement>;
        }
    }
}
